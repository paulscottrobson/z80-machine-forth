              	; --------------------------------------
              	; zasm: assemble "kernel.asm"
              	; date: 2019-01-11 22:33:33
              	; --------------------------------------


              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;		Name : 		kernel.asm
              	;		Author :	Paul Robson (paul@robsons.org.uk)
              	;		Date : 		11th January 2019
              	;		Purpose :	Machine Forth Kernel
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
              	;
              	;		Page allocation. These need to match up with those given in the page table
              	;		in data.asm
              	;													
0020:         	DictionaryPage = $20 								; dictionary page
0022:         	FirstCodePage = $22 								; first code page.
              	;
              	;		Memory allocated from the Unused space in $4000-$7FFF
              	;
7B08:         	EditBuffer = $7B08 									; $7B00-$7D1F 512 byte edit buffer
7EFC:         	StackTop = $7EFC 									;      -$7EFC Top of stack
              	
8000:         			org 	$8000 								; $8000 boot.
8000: 1804    			jr 		Boot
8002: FFFF    			org 	$8004 								; $8004 address of sysinfo
8004: B686    			dw 		Sys_SystemInformation 
              	
8006: ED7BC686	Boot:	ld 		sp,(StackDefault)					; reset Z80 Stack
800A: DD01    			db 		$DD,$01
800C: F3      			di											; disable interrupts
800D: ED910702			db 		$ED,$91,7,2							; set turbo port (7) to 2 (14Mhz speed)
8011: 3E01    			ld 		a,1 								; blue border
8013: D3FE    			out 	($FE),a
8015: 3E22    			ld 		a,FirstCodePage 					; get the page to start
8017: CD2780  			call 	PAGEInitialise
801A: 3AC486  			ld 		a,(BootPage)						; switch to boot page.
801D: CD2780  			call 	PAGEInitialise
8020: 2AC286  			ld 		hl,(BootAddress)					; start address
8023: E9      			jp 		(hl)
              	
8024:         	StopDefault:	
8024: C32480  			jp 		StopDefault
              	
              			include "support/paging.asm" 				; page switcher (not while executing)
              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;		Name : 		paging.asm
              	;		Author :	paul@robsons.org.uk
              	;		Date : 		5th January 2018
              	;		Purpose :	Paging Manager
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
              	; ********************************************************************************************************
              	;
              	; 									Initialise Paging, set current to A
              	;
              	; ********************************************************************************************************
              	
8027:         	PAGEInitialise:
8027: E5      			push 	hl
8028: ED9256  			db 		$ED,$92,$56							; switch to page A
802B: 3C      			inc 	a
802C: ED9257  			db 		$ED,$92,$57
802F: 3D      			dec 	a
8030: 08      			ex 		af,af' 								; put page in A'
8031: 21DC86  			ld 		hl,__PAGEStackBase 					; reset the page stack
8034: 22DA86  			ld 		(__PAGEStackPointer),hl
8037: E1      			pop 	hl
8038: C9      			ret
              	
              	; ********************************************************************************************************
              	;
              	;										Switch to a new page A
              	;
              	; ********************************************************************************************************
              	
8039:         	SYS_Page_Switch:
8039:         	PAGESwitch:
8039: F5      			push 	af
803A: E5      			push 	hl
              	
803B: F5      			push 	af 									; save A on stack
803C: 2ADA86  			ld 		hl,(__PAGEStackPointer) 			; put A' on the stack, the current page
803F: 08      			ex 		af,af'
8040: 77      			ld 		(hl),a
8041: 23      			inc 	hl
8042: 22DA86  			ld 		(__PAGEStackPointer),hl
              	
8045: F1      			pop 	af 									; restore new A
8046: ED9256  			db 		$ED,$92,$56							; switch to page A
8049: 3C      			inc 	a
804A: ED9257  			db 		$ED,$92,$57
804D: 3D      			dec 	a
804E: 08      			ex 		af,af' 								; put page in A'
              	
804F: E1      			pop 	hl
8050: F1      			pop 	af
8051: C9      			ret
              	
              	; ********************************************************************************************************
              	;
              	;										Return to the previous page
              	;
              	; ********************************************************************************************************
              	
8052:         	SYS_Page_Restore:
8052:         	PAGERestore:
8052: F5      			push 	af
8053: E5      			push 	hl
8054: 2ADA86  			ld 		hl,(__PAGEStackPointer) 			; pop the old page off
8057: 2B      			dec 	hl
8058: 7E      			ld 		a,(hl)
8059: 22DA86  			ld 		(__PAGEStackPointer),hl
805C: ED9256  			db 		$ED,$92,$56							; switch to page A
805F: 3C      			inc 	a
8060: ED9257  			db 		$ED,$92,$57
8063: 3D      			dec 	a
8064: 08      			ex 		af,af' 								; update A'
8065: E1      			pop 	hl
8066: F1      			pop 	af
8067: C9      			ret
              					
              			include "support/farmemory.asm"				; far memory routines.
              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;		Name : 		farmemory.asm
              	;		Author :	paul@robsons.org.uk
              	;		Date : 		11th January 2019
              	;		Purpose :	Kernel - Far memory routines.
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              		
              	; ***********************************************************************************************
              	;
              	;								Byte compile far memory A
              	;
              	; ***********************************************************************************************
              	
8068:         	FARCompileByte:
8068: F5      			push 	af 									; save byte and HL
8069: E5      			push 	hl
806A: F5      			push 	af 									; save byte
806B: 3AB886  			ld		a,(HerePage) 						; switch to page
806E: CD3980  			call 	PAGESwitch
8071: 2AB686  			ld 		hl,(Here) 							; write to memory location
8074: F1      			pop 	af
8075: 77      			ld 		(hl),a
8076: 23      			inc 	hl 									; bump memory location
8077: 22B686  			ld 		(Here),hl 							; write back
807A: CD5280  			call 	PAGERestore
807D: E1      			pop 	hl 									; restore and exit
807E: F1      			pop 	af
807F: C9      			ret
              	
              	; ***********************************************************************************************
              	;
              	;								Word compile far memory HL
              	;
              	; ***********************************************************************************************
              	
8080:         	FARCompileWord:
8080: F5      			push 	af 									; save byte and HL
8081: D5      			push 	de
8082: E5      			push 	hl
8083: EB      			ex 		de,hl 								; word into DE
8084: 3AB886  			ld		a,(HerePage) 						; switch to page
8087: CD3980  			call 	PAGESwitch
808A: 2AB686  			ld 		hl,(Here) 							; write to memory location
808D: 73      			ld 		(hl),e
808E: 23      			inc 	hl 	
808F: 72      			ld 		(hl),d
8090: 23      			inc 	hl
8091: 22B686  			ld 		(Here),hl 							; write back
8094: CD5280  			call 	PAGERestore
8097: E1      			pop 	hl
8098: D1      			pop 	de 									; restore and exit
8099: F1      			pop 	af
809A: C9      			ret
              	
              	; ***********************************************************************************************
              	;
              	;								Expand macro during compilation
              	;
              	; ***********************************************************************************************
              	
809B:         	SYS_MacroExpander:
809B: E3      			ex 		(sp),hl 							; old HL on stack, following byte address in HL
809C: 46      			ld 		b,(hl)								; get count
809D:         	__MacroCopy:
809D: 23      			inc 	hl 									; get next
809E: 7E      			ld		a,(hl)
809F: CD6880  			call 	FARCompileByte 						; compile it
80A2: 10F9    			djnz 	__MacroCopy 								
80A4: E1      			pop 	hl 									; restore old HL
80A5: C9      			ret
              			include "support/graphics.asm"				; graphic routines
              	; *********************************************************************************
              	; *********************************************************************************
              	;
              	;		File:		graphics.asm
              	;		Purpose:	General screen I/O routines
              	;		Date : 		5th January 2019
              	;		Author:		paul@robsons.org.uk
              	;
              	; *********************************************************************************
              	; *********************************************************************************
              			
              	; *********************************************************************************
              	;
              	;								Set Graphics Mode to L
              	;
              	; *********************************************************************************
              	
80A6:         	SYS_GFX_SetMode:
80A6: C5      			push 	bc
80A7: D5      			push 	de
80A8: E5      			push 	hl
80A9: 7D      			ld 		a,l 								; save new mode.
80AA: 32D286  			ld 		(SIScreenMode),a
80AD: 2D      			dec 	l 									; L = 1 mode layer2
80AE: 2808    			jr 		z,__GFXLayer2
80B0: 2D      			dec 	l
80B1: 280A    			jr 		z,__GFXLowRes 						; L = 2 mode lowres
              	
80B3: CDE281  			call 	GFXInitialise48k					; L = 0 or anything else, 48k mode.
80B6: 1808    			jr 		__GFXConfigure
              	
80B8:         	__GFXLayer2:
80B8: CD5A82  			call 	GFXInitialiseLayer2
80BB: 1803    			jr 		__GFXConfigure
              	
80BD:         	__GFXLowRes:
80BD: CD1183  			call 	GFXInitialiseLowRes
              	
80C0:         	__GFXConfigure:
80C0: 7D      			ld 		a,l 								; save screen size
80C1: 32CA86  			ld 		(SIScreenWidth),a
80C4: 7C      			ld 		a,h
80C5: 32CE86  			ld 		(SIScreenHeight),a
80C8: EB      			ex 		de,hl 								; save driver
80C9: 22D886  			ld 		(SIScreenDriver),hl
              	
80CC: E1      			pop 	hl
80CD: D1      			pop 	de
80CE: C1      			pop 	bc
80CF: C9      			ret
              	
              	; *********************************************************************************
              	;
              	;		Write character D (colour) E (character) to position HL.
              	;
              	; *********************************************************************************
              	
80D0:         	SYS_GFX_Write:
80D0: F5      			push 	af
80D1: C5      			push 	bc
80D2: D5      			push 	de
80D3: E5      			push 	hl
80D4: 01DE80  			ld 		bc,__GFXWCExit
80D7: C5      			push 	bc
80D8: ED4BD886			ld 		bc,(SIScreenDriver)
80DC: C5      			push 	bc
80DD: C9      			ret
80DE:         	__GFXWCExit:
80DE: E1      			pop 	hl
80DF: D1      			pop 	de
80E0: C1      			pop 	bc
80E1: F1      			pop 	af
80E2: C9      			ret
              	
              	; *********************************************************************************
              	;
              	;						Write hex word DE at position HL
              	;
              	; *********************************************************************************
              	
80E3:         	SYS_GFX_WriteHex:
80E3: 3E05    			ld 		a,5
80E5:         	GFXWriteHexWordA:
80E5: C5      			push 	bc
80E6: D5      			push 	de
80E7: E5      			push 	hl
80E8: 4F      			ld 		c,a
80E9: 7A      			ld 		a,d
80EA: D5      			push 	de
80EB: CDF780  			call 	__GFXWHByte
80EE: D1      			pop 	de
80EF: 7B      			ld 		a,e
80F0: CDF780  			call	__GFXWHByte
80F3: E1      			pop 	hl
80F4: D1      			pop 	de
80F5: C1      			pop 	bc
80F6: C9      			ret
              	
80F7:         	__GFXWHByte:
80F7: F5      			push 	af
80F8: CB0F    			rrc 	a
80FA: CB0F    			rrc		a
80FC: CB0F    			rrc 	a
80FE: CB0F    			rrc 	a
8100: CD0481  			call 	__GFXWHNibble
8103: F1      			pop 	af
8104:         	__GFXWHNibble:
8104: 51      			ld 		d,c
8105: E60F    			and 	15
8107: FE0A    			cp 		10
8109: 3802    			jr 		c,__GFXWHDigit
810B: C607    			add		a,7
810D:         	__GFXWHDigit:
810D: C630    			add 	a,48
810F: 5F      			ld 		e,a
8110: CDD080  			call 	SYS_GFX_Write
8113: 23      			inc 	hl
8114: C9      			ret
              			include "support/keyboard.asm"				; keyboard I/O
              	; *********************************************************************************
              	; *********************************************************************************
              	;
              	;		File:		keyboard.asm
              	;		Purpose:	Spectrum Keyboard Interface
              	;		Date : 		27th December 2018
              	;		Author:		paul@robsons.org.uk
              	;
              	; *********************************************************************************
              	; *********************************************************************************
              	
              	
              	; *********************************************************************************
              	;
              	;			Scan the keyboard, return currently pressed key code in A
              	;
              	; *********************************************************************************
              		
8115:         	IOScanKeyboard:
8115: C5      			push 	bc
8116: D5      			push 	de
8117: E5      			push 	hl
              	
8118: 216A81  			ld 		hl,__kr_no_shift_table 				; firstly identify shift state.
              	
811B: 0EFE    			ld 		c,$FE 								; check CAPS SHIFT (emulator : left shift)
811D: 06FE    			ld 		b,$FE
811F: ED78    			in 		a,(c)
8121: CB47    			bit 	0,a
8123: 2005    			jr 		nz,__kr1
8125: 219281  			ld 		hl,__kr_shift_table
8128: 180B    			jr 		__kr2
812A:         	__kr1:
812A: 067F    			ld 		b,$7F 								; check SYMBOL SHIFT (emulator : right shift)
812C: ED78    			in 		a,(c)
812E: CB4F    			bit 	1,a
8130: 2003    			jr 		nz,__kr2
8132: 21BA81  			ld 		hl,__kr_symbol_shift_table
8135:         	__kr2:
              	
8135: 1EFE    			ld 		e,$FE 								; scan pattern.
8137: 7B      	__kr3:	ld 		a,e 								; work out the mask, so we don't detect shift keys
8138: 161E    			ld 		d,$1E 								; $FE row, don't check the least significant bit.
813A: FEFE    			cp 		$FE
813C: 2808    			jr 		z,___kr4
813E: 161D    			ld 		d,$01D 								; $7F row, don't check the 2nd least significant bit
8140: FE7F    			cp 		$7F
8142: 2802    			jr 		z,___kr4
8144: 161F    			ld 		d,$01F 								; check all bits.
8146:         	___kr4:
8146: 43      			ld 		b,e 								; scan the keyboard
8147: 0EFE    			ld 		c,$FE
8149: ED78    			in 		a,(c)
814B: 2F      			cpl 										; make that active high.
814C: A2      			and 	d  									; and with check value.
814D: 2011    			jr 		nz,__kr_keypressed 					; exit loop if key pressed.
              	
814F: 23      			inc 	hl 									; next set of keyboard characters
8150: 23      			inc 	hl
8151: 23      			inc 	hl
8152: 23      			inc 	hl
8153: 23      			inc 	hl
              	
8154: 7B      			ld 		a,e 								; get pattern
8155: 87      			add 	a,a 								; shift left
8156: F601    			or 		1 									; set bit 1.
8158: 5F      			ld 		e,a
              	
8159: FEFF    			cp 		$FF 								; finished when all 1's.
815B: 20DA    			jr 		nz,__kr3 
815D: AF      			xor 	a
815E: 1806    			jr 		__kr_exit 							; no key found, return with zero.
              	;
8160:         	__kr_keypressed:
8160: 23      			inc 	hl  								; shift right until carry set
8161: 1F      			rra
8162: 30FC    			jr 		nc,__kr_keypressed
8164: 2B      			dec 	hl 									; undo the last inc hl
8165: 7E      			ld 		a,(hl) 								; get the character number.
8166:         	__kr_exit:
8166: E1      			pop 	hl
8167: D1      			pop 	de
8168: C1      			pop 	bc
8169: C9      			ret
              	
              	; *********************************************************************************
              	;	 						Keyboard Mapping Tables
              	; *********************************************************************************
              	;
              	;	$FEFE-$7FFE scan, bit 0-4, active low
              	;
              	;	3:Abort (Shift+Q) 8:Backspace 13:Return 
              	;	27:Break 32-127: Std ASCII all L/C
              	;
816A:         	__kr_no_shift_table:
816A: 007A7863			db 		0,  'z','x','c','v',			'a','s','d','f','g'
816E: 76617364	
8172: 6667    	
8174: 71776572			db 		'q','w','e','r','t',			'1','2','3','4','5'
8178: 74313233	
817C: 3435    	
817E: 30393837			db 		'0','9','8','7','6',			'p','o','i','u','y'
8182: 36706F69	
8186: 7579    	
8188: 0D6C6B6A			db 		13, 'l','k','j','h',			' ', 0, 'm','n','b'
818C: 6820006D	
8190: 6E62    	
              	
8192:         	__kr_shift_table:
8192: 003A003F			db 		 0, ':', 0,  '?','/',			'~','|','\','{','}'
8196: 2F7E7C5C	
819A: 7B7D    	
819C: 0300003C			db 		 3,  0,  0  ,'<','>',			'!','@','#','$','%'
81A0: 3E214023	
81A4: 2425    	
81A6: 5F292827			db 		'_',')','(',"'",'&',			'"',';', 0, ']','['
81AA: 26223B00	
81AE: 5D5B    	
81B0: 1B3D2B2D			db 		27, '=','+','-','^',			' ', 0, '.',',','*'
81B4: 5E20002E	
81B8: 2C2A    	
              	
81BA:         	__kr_symbol_shift_table:
81BA: 003A003F			db 		0,  ':',0  ,'?','/',			'~','|','\','{','}'
81BE: 2F7E7C5C	
81C2: 7B7D    	
81C4: 0300003C			db 		3,  0,  0  ,'<','>',			16,17,18,19,20
81C8: 3E101112	
81CC: 1314    	
81CE: 08291716			db 		8, ')',23,  22, 21,				'"',';', 0, ']','['
81D2: 15223B00	
81D6: 5D5B    	
81D8: 1B3D2B2D			db 		27, '=','+','-','^',			' ', 0, '.',',','*'
81DC: 5E20002E	
81E0: 2C2A    	
              			include "support/screen48k.asm" 			; drivers
              	; *********************************************************************************
              	; *********************************************************************************
              	;
              	;		File:		screen48k.asm
              	;		Purpose:	Hardware interface to Spectrum display, standard but with
              	;					sprites enabled. 	
              	;		Date : 		5th January 2019
              	;		Author:		paul@robsons.org.uk
              	;
              	; *********************************************************************************
              	; *********************************************************************************
              	
              	; *********************************************************************************
              	;
              	;						Call the SetMode for the Spectrum 48k 
              	;
              	; *********************************************************************************
              	
81E2:         	GFXInitialise48k:
81E2: F5      			push 	af 									; save registers
81E3: C5      			push 	bc
              	
81E4: 013B12  			ld 		bc,$123B 							; Layer 2 access port
81E7: 3E00    			ld 		a,0 								; disable Layer 2
81E9: ED79    			out 	(c),a
81EB: ED911503			db 		$ED,$91,$15,$3						; Disable LowRes but enable Sprites
              	
81EF: 210040  			ld 		hl,$4000 							; clear pixel memory
81F2: 3600    	__cs1:	ld 		(hl),0
81F4: 23      			inc 	hl
81F5: 7C      			ld 		a,h
81F6: FE58    			cp 		$58
81F8: 20F8    			jr 		nz,__cs1
81FA: 3647    	__cs2:	ld 		(hl),$47							; clear attribute memory
81FC: 23      			inc 	hl
81FD: 7C      			ld 		a,h
81FE: FE5B    			cp 		$5B
8200: 20F8    			jr 		nz,__cs2	
8202: AF      			xor 	a 									; border off
8203: D3FE    			out 	($FE),a
8205: C1      			pop 	bc
8206: F1      			pop 	af
8207: 212018  			ld 		hl,$1820 							; H = 24,L = 32, screen extent
820A: 110E82  			ld 		de,GFXPrintCharacter48k
820D: C9      			ret
              	
              	; *********************************************************************************
              	;
              	;				Write a character E on the screen at HL, in colour D
              	;
              	; *********************************************************************************
              	
820E:         	GFXPrintCharacter48k:
820E: F5      			push 	af 									; save registers
820F: C5      			push 	bc
8210: D5      			push 	de
8211: E5      			push 	hl
              	
8212: 43      			ld 		b,e 								; character in B
8213: 7C      			ld 		a,h 								; check range.
8214: FE03    			cp 		3
8216: 303D    			jr 		nc,__ZXWCExit
              	;
              	;		work out attribute position
              	;
8218: E5      			push 	hl 									; save position.
8219: 7C      			ld 		a,h
821A: C658    			add 	$58
821C: 67      			ld 		h,a
              	
821D: 7A      			ld 		a,d 								; get current colour
821E: E607    			and 	7  									; mask 0..2
8220: F640    			or 		$40  								; make bright
8222: 77      			ld 		(hl),a 								; store it.	
8223: E1      			pop 	hl
              	;
              	;		calculate screen position => HL
              	;
8224: D5      			push 	de
8225: EB      			ex 		de,hl
8226: 6B      			ld 		l,e 								; Y5 Y4 Y3 X4 X3 X2 X1 X0
8227: 7A      			ld 		a,d
8228: E603    			and 	3
822A: 87      			add 	a,a
822B: 87      			add 	a,a
822C: 87      			add 	a,a
822D: F640    			or 		$40
822F: 67      			ld 		h,a
8230: D1      			pop 	de
              	;
              	;		char# 32-127 to font address => DE
              	;
8231: E5      			push 	hl
8232: 78      			ld 		a,b 								; get character
8233: E67F    			and 	$7F 								; bits 0-6 only.
8235: D620    			sub 	32
8237: 6F      			ld 		l,a 								; put in HL
8238: 2600    			ld 		h,0
823A: 29      			add 	hl,hl 								; x 8
823B: 29      			add 	hl,hl
823C: 29      			add 	hl,hl
823D: ED5BD686			ld 		de,(SIFontBase) 					; add the font base.
8241: 19      			add 	hl,de
8242: EB      			ex 		de,hl 								; put in DE (font address)
8243: E1      			pop 	hl
              	;
              	;		copy font data to screen position.
              	;
8244: 78      			ld 		a,b
8245: 0608    			ld 		b,8 								; copy 8 characters
8247: 0E00    			ld 		c,0 								; XOR value 0
8249: CB7F    			bit 	7,a 								; is the character reversed
824B: 2801    			jr 		z,__ZXWCCopy
824D: 0D      			dec 	c 									; C is the XOR mask now $FF
824E:         	__ZXWCCopy:
824E: 1A      			ld 		a,(de)								; get font data
824F: A9      			xor 	c 									; xor with reverse
8250: 77      			ld 		(hl),a 								; write back
8251: 24      			inc 	h 									; bump pointers
8252: 13      			inc 	de
8253: 10F9    			djnz 	__ZXWCCopy 							; do B times.
8255:         	__ZXWCExit:
8255: E1      			pop 	hl 									; restore and exit
8256: D1      			pop 	de
8257: C1      			pop 	bc
8258: F1      			pop 	af
8259: C9      			ret
              			include "support/screen_layer2.asm"
              	; *********************************************************************************
              	; *********************************************************************************
              	;
              	;		File:		screen_layer2.asm
              	;		Purpose:	Layer 2 console interface, sprites enabled, no shadow.
              	;		Date : 		5th January 2019
              	;		Author:		paul@robsons.org.uk
              	;
              	; *********************************************************************************
              	; *********************************************************************************
              	
              	; *********************************************************************************
              	;
              	;								Clear Layer 2 Display.
              	;
              	; *********************************************************************************
              	
              	
825A:         	GFXInitialiseLayer2:
825A: F5      			push 	af
825B: C5      			push 	bc
825C: D5      			push 	de
825D: ED911503			db 		$ED,$91,$15,$3						; Disable LowRes but enable Sprites
              	
8261: 1E02    			ld 		e,2 								; 3 banks to erase
8263:         	L2PClear:
8263: 7B      			ld 		a,e 								; put bank number in bits 6/7
8264: CB0F    			rrc 	a
8266: CB0F    			rrc 	a
8268: F603    			or 		2+1 								; shadow on, visible, enable write paging
826A: 013B12  			ld 		bc,$123B 							; out to layer 2 port
826D: ED79    			out 	(c),a
826F: 210040  			ld 		hl,$4000 							; erase the bank to $00 
8272:         	L2PClearBank: 										; assume default palette :)
8272: 2B      			dec 	hl
8273: 3600    			ld 		(hl),$00
8275: 7C      			ld 		a,h
8276: B5      			or 		l
8277: 20F9    			jr		nz,L2PClearBank
8279: 1D      			dec 	e
827A: F26382  			jp 		p,L2PClear
              	
827D: AF      			xor 	a
827E: D3FE    			out 	($FE),a
              	
8280: D1      			pop 	de
8281: C1      			pop 	bc
8282: F1      			pop 	af
8283: 212018  			ld 		hl,$1820 							; still 32 x 24 	
8286: 118A82  			ld 		de,GFXPrintCharacterLayer2
8289: C9      			ret
              	;
              	;		Print Character E, colour D, position HL
              	;
828A:         	GFXPrintCharacterLayer2:
828A: F5      			push 	af
828B: C5      			push 	bc
828C: D5      			push 	de
828D: E5      			push 	hl
828E: DDE5    			push 	ix
              	
8290: 43      			ld 		b,e 								; save A temporarily
8291: 78      			ld 		a,b
8292: E67F    			and 	$7F
8294: FE20    			cp 		32
8296: 3872    			jr 		c,__L2Exit 							; check char in range
8298: 7C      			ld 		a,h
8299: FE03    			cp 		3
829B: 306D    			jr 		nc,__L2Exit 						; check position in range
829D: 78      			ld 		a,b
              	
829E: F5      			push 	af 	
829F: AF      			xor 	a 									; convert colour in C to palette index
82A0: CB42    			bit 	0,d 								; (assumes standard palette)
82A2: 2802    			jr 		z,__L2Not1
82A4: F603    			or 		$03
82A6:         	__L2Not1:
82A6: CB52    			bit 	2,d
82A8: 2802    			jr 		z,__L2Not2
82AA: F61C    			or 		$1C
82AC:         	__L2Not2:
82AC: CB4A    			bit 	1,d
82AE: 2802    			jr 		z,__L2Not3
82B0: F6C0    			or 		$C0
82B2:         	__L2Not3:
82B2: 4F      			ld 		c,a 								; C is foreground
82B3: 0600    			ld 		b,0									; B is xor flipper, initially zero
82B5: F1      			pop 	af 									; restore char
              	
82B6: E5      			push 	hl
82B7: CB7F    			bit 	7,a 								; adjust background bit on bit 7
82B9: 2802    			jr 		z,__L2NotCursor
82BB: 06FF    			ld 		b,$FF 								; light grey is cursor
82BD:         	__L2NotCursor:
82BD: E67F    			and 	$7F 								; offset from space
82BF: D620    			sub 	$20
82C1: 6F      			ld 		l,a 								; put into HL
82C2: 2600    			ld 		h,0
82C4: 29      			add 	hl,hl 								; x 8
82C5: 29      			add 	hl,hl
82C6: 29      			add 	hl,hl
              	
82C7: E5      			push 	hl 									; transfer to IX
82C8: DDE1    			pop 	ix
82CA: E1      			pop 	hl
              	
82CB: C5      			push 	bc 									; add the font base to it.
82CC: ED4BD686			ld 		bc,(SIFontBase)
82D0: DD09    			add 	ix,bc
82D2: C1      			pop 	bc
              			;
              			;		figure out the correct bank.
              			;
82D3: C5      			push 	bc
82D4: 7C      			ld  	a,h 								; this is the page number.
82D5: CB0F    			rrc 	a
82D7: CB0F    			rrc 	a
82D9: E6C0    			and 	$C0 								; in bits 6 & 7
82DB: F603    			or 		$03 								; shadow on, visible, enable write pagin.
82DD: 013B12  			ld 		bc,$123B 							; out to layer 2 port
82E0: ED79    			out 	(c),a
82E2: C1      			pop 	bc
              			;
              			; 		now figure out position in bank
              			;
82E3: EB      			ex 		de,hl
82E4: 6B      			ld 		l,e
82E5: 2600    			ld 		h,0
82E7: 29      			add 	hl,hl 								
82E8: 29      			add 	hl,hl
82E9: 29      			add 	hl,hl
82EA: CB24    			sla 	h
82EC: CB24    			sla 	h
82EE: CB24    			sla 	h
              	
82F0: 1E08    			ld 		e,8 								; do 8 rows
82F2:         	__L2Outer:
82F2: E5      			push 	hl 									; save start
82F3: 1608    			ld 		d,8 								; do 8 columns
82F5: DD7E00  			ld 		a,(ix+0) 							; get the bit pattern
82F8: A8      			xor 	b 									; maybe flip it ?
82F9: DD23    			inc 	ix
82FB:         	__L2Loop:
82FB: 3600    			ld 		(hl),0 								; background
82FD: 87      			add 	a,a 								; shift pattern left
82FE: 3001    			jr 		nc,__L2NotSet
8300: 71      			ld 		(hl),c 								; if MSB was set, overwrite with fgr
8301:         	__L2NotSet:
8301: 23      			inc 	hl
8302: 15      			dec 	d 									; do a row
8303: 20F6    			jr 		nz,	__L2Loop
8305: E1      			pop 	hl 									; restore, go 256 bytes down.
8306: 24      			inc 	h
8307: 1D      			dec 	e 									; do 8 rows
8308: 20E8    			jr 		nz,__L2Outer	
830A:         	__L2Exit:
830A: DDE1    			pop 	ix
830C: E1      			pop 	hl
830D: D1      			pop 	de
830E: C1      			pop 	bc
830F: F1      			pop 	af
8310: C9      			ret
              			include "support/screen_lores.asm"
              	; *********************************************************************************
              	; *********************************************************************************
              	;
              	;		File:		screen_lores.asm
              	;		Purpose:	LowRes console interface, sprites enabled.
              	;		Date : 		5th January 2019
              	;		Author:		paul@robsons.org.uk
              	;
              	; *********************************************************************************
              	; *********************************************************************************
              	
              	; *********************************************************************************
              	;
              	;								Clear LowRes Display.
              	;
              	; *********************************************************************************
              	
8311:         	GFXInitialiseLowRes:
8311: F5      			push 	af
8312: C5      			push 	bc
8313: D5      			push 	de
              	
8314: ED911583			db 		$ED,$91,$15,$83						; Enable LowRes and enable Sprites
8318: AF      			xor 	a 									; layer 2 off.
8319: 013B12  			ld 		bc,$123B 							; out to layer 2 port
831C: ED79    			out 	(c),a
              	
831E: 210040  			ld 		hl,$4000 							; erase the bank to $00 
8321: 110060  			ld 		de,$6000
8324:         	LowClearScreen: 									; assume default palette :)
8324: AF      			xor 	a
8325: 77      			ld 		(hl),a
8326: 12      			ld 		(de),a
8327: 23      			inc 	hl
8328: 13      			inc 	de
8329: 7C      			ld 		a,h
832A: FE58    			cp 		$58
832C: 20F6    			jr		nz,LowClearScreen
832E: AF      			xor 	a
832F: D3FE    			out 	($FE),a
8331: D1      			pop 	de
8332: C1      			pop 	bc
8333: F1      			pop 	af
8334: 21100C  			ld 		hl,$0C10 							; resolution is 16x12 chars
8337: 113B83  			ld 		de,GFXPrintCharacterLowRes
833A: C9      			ret
              	;
              	;		Print Character E Colour D @ HL
              	;
833B:         	GFXPrintCharacterLowRes:
833B: F5      			push 	af
833C: C5      			push 	bc
833D: D5      			push 	de
833E: E5      			push 	hl
833F: DDE5    			push 	ix
              	
8341: 43      			ld 		b,e 								; save character in B
8342: 7B      			ld 		a,e
8343: E67F    			and 	$7F
8345: FE20    			cp 		32
8347: 3866    			jr 		c,__LPExit
              	
8349: 29      			add 	hl,hl
834A: 29      			add 	hl,hl
834B: 7C      			ld	 	a,h 								; check in range 192*4 = 768
834C: FE03    			cp 		3
834E: 305F    			jr 		nc,__LPExit
              	
8350: 7A      			ld 		a,d 								; only lower 3 bits of colour
8351: E607    			and 	7
8353: 4F      			ld 		c,a 								; C is foreground
              	
8354: E5      			push 	hl
8355: 78      			ld 		a,b 								; get char back
8356: 0600    			ld 		b,0 								; B = no flip colour.
8358: CB7F    			bit 	7,a
835A: 2801    			jr 		z,__LowNotReverse 					; but 7 set, flip is $FF
835C: 05      			dec 	b
835D:         	__LowNotReverse:
835D: E67F    			and 	$7F 								; offset from space
835F: D620    			sub 	$20
8361: 6F      			ld 		l,a 								; put into HL
8362: 2600    			ld 		h,0
8364: 29      			add 	hl,hl 								; x 8
8365: 29      			add 	hl,hl
8366: 29      			add 	hl,hl
              	
8367: E5      			push 	hl 									; transfer to IX
8368: DDE1    			pop 	ix
              	
836A: C5      			push 	bc 									; add the font base to it.
836B: ED4BD686			ld 		bc,(SIFontBase)
836F: DD09    			add 	ix,bc
8371: C1      			pop 	bc
8372: E1      			pop 	hl
8373: EB      			ex 		de,hl
8374: 7B      			ld 		a,e 								; put DE => HL
8375: E6C0    			and 	192 								; these are part of Y
8377: 6F      			ld 		l,a  								; Y multiplied by 4 then 32 = 128
8378: 62      			ld 		h,d		
8379: 29      			add 	hl,hl
837A: 29      			add 	hl,hl
837B: 29      			add 	hl,hl
837C: 29      			add 	hl,hl
837D: CBF4    			set 	6,h 								; put into $4000 range
              	
837F: 3E3C    			ld 		a,15*4 								; mask for X, which has been premultiplied.
8381: A3      			and 	e 									; and with E, gives X position
8382: 87      			add 	a,a 								; now multiplied by 8.
8383: 5F      			ld 		e,a 								; DE is x offset.
8384: 1600    			ld 		d,0  
              	
8386: 19      			add 	hl,de
8387: 7C      			ld 		a,h
8388: FE58    			cp 		$58 								; need to be shifted to 2nd chunk ?
838A: 3804    			jr 		c,__LowNotLower2
838C: 110008  			ld 		de,$0800
838F: 19      			add 	hl,de
8390:         	__LowNotLower2:
8390: 1E08    			ld 		e,8 								; do 8 rows
8392:         	__LowOuter:
8392: E5      			push 	hl 									; save start
8393: 1608    			ld 		d,8 								; do 8 columns
8395: DD7E00  			ld 		a,(ix+0) 							; get the bit pattern
8398: A8      			xor 	b
8399: DD23    			inc 	ix
839B:         	__LowLoop:
839B: 3600    			ld 		(hl),0 								; background
839D: 87      			add 	a,a 								; shift pattern left
839E: 3001    			jr 		nc,__LowNotSet
83A0: 71      			ld 		(hl),c 								; if MSB was set, overwrite with fgr
83A1:         	__LowNotSet:
83A1: 2C      			inc 	l
83A2: 15      			dec 	d 									; do a row
83A3: 20F6    			jr 		nz,	__LowLoop
83A5: E1      			pop 	hl 									; restore, go 256 bytes down.
83A6: D5      			push 	de
83A7: 118000  			ld 		de,128
83AA: 19      			add 	hl,de
83AB: D1      			pop 	de
83AC: 1D      			dec 	e 									; do 8 rows
83AD: 20E3    			jr 		nz,__LowOuter	
83AF:         	__LPExit:
83AF: DDE1    			pop 	ix
83B1: E1      			pop 	hl
83B2: D1      			pop 	de
83B3: C1      			pop 	bc
83B4: F1      			pop 	af
83B5: C9      			ret
              	
              			
83B6:         	AlternateFont:										; nicer font
              			include "font.inc" 							; can be $3D00 here to save memory
83B6: 00000000	  db 0,0,0,0,0,0,0,0,12,30,30,12,12,0,12,0,54,54,0,0,0,0,0,0,54,54,127,54,127,54,54,0,24,62,96,60,6,124,24,0,0,99,102,12,24,51,99,0,28,54,28,59,110,102,59,0,48,48,96,0,0,0,0,0,12,24,48,48,48,24,12,0,48,24,12,12,12,24,48,0,0,51,30,127,30,51,0,0,0,24,24,126,24,24,0,0,0,0,0,0,0,24,24,48,0,0,0,126,0,0,0,0,0,0,0,0,0,24,24,0,3,6,12,24,48,96,64,0,62,99,103,111,123,115,62,0,24,56,24,24,24,24,126,0,60,102,6,28,48,102,126,0,60,102,6,28,6,102,60,0,14,30,54,102,127,6,15,0,126,96,124,6,6,102,60,0,28,48,96,124,102,102,60,0,126,102,6,12,24,24,24,0,60,102,102,60,102,102,60,0,60,102,102,62,6,12,56,0,0,24,24,0,0,24,24,0,0,24,24,0,0,24,24,48,12,24,48,96,48,24,12,0,0,0,126,0,0,126,0,0,48,24,12,6,12,24,48,0,60,102,6,12,24,0,24,0,62,99,111,111,111,96,60,0,24,60,102,102,126,102,102,0,126,51,51,62,51,51,126,0,30,51,96,96,96,51,30,0,124,54,51,51,51,54,124,0,127,49,52,60,52,49,127,0,127,49,52,60,52,48,120,0,30,51,96,96,103,51,31,0,102,102,102,126,102,102,102,0,60,24,24,24,24,24,60,0,15,6,6,6,102,102,60,0,115,51,54,60,54,51,115,0,120,48,48,48,49,51,127,0,99,119,127,127,107,99,99,0,99,115,123,111,103,99,99,0,28,54,99,99,99,54,28,0,126,51,51,62,48,48,120,0,60,102,102,102,110,60,14,0,126,51,51,62,54,51,115,0,60,102,112,56,14,102,60,0,126,90,24,24,24,24,60,0,102,102,102,102,102,102,126,0,102,102,102,102,102,60,24,0,99,99,99,107,127,119,99,0,99,99,54,28,28,54,99,0,102,102,102,60,24,24,60,0,127,99,70,12,25,51,127,0,60,48,48,48,48,48,60,0,96,48,24,12,6,3,1,0,60,12,12,12,12,12,60,0,8,28,54,99,0,0,0,0,0,0,0,0,0,0,0,127,24,24,12,0,0,0,0,0,0,0,60,6,62,102,59,0,112,48,48,62,51,51,110,0,0,0,60,102,96,102,60,0,14,6,6,62,102,102,59,0,0,0,60,102,126,96,60,0,28,54,48,120,48,48,120,0,0,0,59,102,102,62,6,124,112,48,54,59,51,51,115,0,24,0,56,24,24,24,60,0,6,0,6,6,6,102,102,60,112,48,51,54,60,54,115,0,56,24,24,24,24,24,60,0,0,0,102,127,127,107,99,0,0,0,124,102,102,102,102,0,0,0,60,102,102,102,60,0,0,0,110,51,51,62,48,120,0,0,59,102,102,62,6,15,0,0,110,59,51,48,120,0,0,0,62,96,60,6,124,0,8,24,62,24,24,26,12,0,0,0,102,102,102,102,59,0,0,0,102,102,102,60,24,0,0,0,99,107,127,127,54,0,0,0,99,54,28,54,99,0,0,0,102,102,102,62,6,124,0,0,126,76,24,50,126,0,14,24,24,112,24,24,14,0,12,12,12,0,12,12,12,0,112,24,24,14,24,24,112,0,59,110,0,0,0,0,0,0,0,0,0,0,0,0,0,0
83BA: 00000000	
83BE: 0C1E1E0C	
83C2: 0C000C00	
83C6: 36360000	
83CA: 00000000	
83CE: 36367F36	
83D2: 7F363600	
83D6: 183E603C	
83DA: 067C1800	
83DE: 0063660C	
83E2: 18336300	
83E6: 1C361C3B	
83EA: 6E663B00	
83EE: 30306000	
83F2: 00000000	
83F6: 0C183030	
83FA: 30180C00	
83FE: 30180C0C	
8402: 0C183000	
8406: 00331E7F	
840A: 1E330000	
840E: 0018187E	
8412: 18180000	
8416: 00000000	
841A: 00181830	
841E: 0000007E	
8422: 00000000	
8426: 00000000	
842A: 00181800	
842E: 03060C18	
8432: 30604000	
8436: 3E63676F	
843A: 7B733E00	
843E: 18381818	
8442: 18187E00	
8446: 3C66061C	
844A: 30667E00	
844E: 3C66061C	
8452: 06663C00	
8456: 0E1E3666	
845A: 7F060F00	
845E: 7E607C06	
8462: 06663C00	
8466: 1C30607C	
846A: 66663C00	
846E: 7E66060C	
8472: 18181800	
8476: 3C66663C	
847A: 66663C00	
847E: 3C66663E	
8482: 060C3800	
8486: 00181800	
848A: 00181800	
848E: 00181800	
8492: 00181830	
8496: 0C183060	
849A: 30180C00	
849E: 00007E00	
84A2: 007E0000	
84A6: 30180C06	
84AA: 0C183000	
84AE: 3C66060C	
84B2: 18001800	
84B6: 3E636F6F	
84BA: 6F603C00	
84BE: 183C6666	
84C2: 7E666600	
84C6: 7E33333E	
84CA: 33337E00	
84CE: 1E336060	
84D2: 60331E00	
84D6: 7C363333	
84DA: 33367C00	
84DE: 7F31343C	
84E2: 34317F00	
84E6: 7F31343C	
84EA: 34307800	
84EE: 1E336060	
84F2: 67331F00	
84F6: 6666667E	
84FA: 66666600	
84FE: 3C181818	
8502: 18183C00	
8506: 0F060606	
850A: 66663C00	
850E: 7333363C	
8512: 36337300	
8516: 78303030	
851A: 31337F00	
851E: 63777F7F	
8522: 6B636300	
8526: 63737B6F	
852A: 67636300	
852E: 1C366363	
8532: 63361C00	
8536: 7E33333E	
853A: 30307800	
853E: 3C666666	
8542: 6E3C0E00	
8546: 7E33333E	
854A: 36337300	
854E: 3C667038	
8552: 0E663C00	
8556: 7E5A1818	
855A: 18183C00	
855E: 66666666	
8562: 66667E00	
8566: 66666666	
856A: 663C1800	
856E: 6363636B	
8572: 7F776300	
8576: 6363361C	
857A: 1C366300	
857E: 6666663C	
8582: 18183C00	
8586: 7F63460C	
858A: 19337F00	
858E: 3C303030	
8592: 30303C00	
8596: 6030180C	
859A: 06030100	
859E: 3C0C0C0C	
85A2: 0C0C3C00	
85A6: 081C3663	
85AA: 00000000	
85AE: 00000000	
85B2: 0000007F	
85B6: 18180C00	
85BA: 00000000	
85BE: 00003C06	
85C2: 3E663B00	
85C6: 7030303E	
85CA: 33336E00	
85CE: 00003C66	
85D2: 60663C00	
85D6: 0E06063E	
85DA: 66663B00	
85DE: 00003C66	
85E2: 7E603C00	
85E6: 1C363078	
85EA: 30307800	
85EE: 00003B66	
85F2: 663E067C	
85F6: 7030363B	
85FA: 33337300	
85FE: 18003818	
8602: 18183C00	
8606: 06000606	
860A: 0666663C	
860E: 70303336	
8612: 3C367300	
8616: 38181818	
861A: 18183C00	
861E: 0000667F	
8622: 7F6B6300	
8626: 00007C66	
862A: 66666600	
862E: 00003C66	
8632: 66663C00	
8636: 00006E33	
863A: 333E3078	
863E: 00003B66	
8642: 663E060F	
8646: 00006E3B	
864A: 33307800	
864E: 00003E60	
8652: 3C067C00	
8656: 08183E18	
865A: 181A0C00	
865E: 00006666	
8662: 66663B00	
8666: 00006666	
866A: 663C1800	
866E: 0000636B	
8672: 7F7F3600	
8676: 00006336	
867A: 1C366300	
867E: 00006666	
8682: 663E067C	
8686: 00007E4C	
868A: 18327E00	
868E: 0E181870	
8692: 18180E00	
8696: 0C0C0C00	
869A: 0C0C0C00	
869E: 7018180E	
86A2: 18187000	
86A6: 3B6E0000	
86AA: 00000000	
86AE: 00...   	
              	
              			include "data.asm"		
              		; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;		Name : 		data.asm
              	;		Author :	Paul Robson (paul@robsons.org.uk)
              	;		Date : 		5th January 2019
              	;		Purpose :	Data area
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
              	; ***************************************************************************************
              	;
              	;								System Information
              	;
              	; ***************************************************************************************
              	
86B6:         	Sys_SystemInformation:
              	
86B6:         	Here:												; +0 	Here 
86B6: EC86    			dw 		FreeMemory
86B8:         	HerePage: 											; +2	Here.Page
86B8: 2200    			db 		FirstCodePage,0
86BA:         	NextFreePage: 										; +4 	Next available code page (2 8k pages/page)
86BA: 24000000			db 		FirstCodePage+2,0,0,0
86BE:         	DisplayInfo: 										; +8 	Display information
86BE: B6860000			dw 		Sys_SystemInformation,0
86C2:         	BootAddress:										; +12 	Boot Address
86C2: 2480    			dw 		StopDefault
86C4:         	BootPage:											; +14 	Boot Page
86C4: 2200    			db 		FirstCodePage,0
86C6:         	StackDefault: 										; +16 	Initial value of stack.
86C6: FC7E0000			dw 		StackTop,0 
              	
              	; ***************************************************************************************
              	;
              	;							 Display system information
              	;
              	; ***************************************************************************************
              	
86CA:         	Sys_DisplayInformation:
              	
86CA:         	SIScreenWidth: 										; +0 	screen width
86CA: 00000000			db 		0,0,0,0	
86CE:         	SIScreenHeight:										; +4 	screen height
86CE: 00000000			db 		0,0,0,0
86D2:         	SIScreenMode:										; +8 	current mode
86D2: 00000000			db 		0,0,0,0
86D6:         	SIFontBase:											; +12 	font in use
86D6: B683    			dw 		AlternateFont
86D8:         	SIScreenDriver:										; +16 	Screen Driver
86D8: 0000    			dw 		0	
              	
              	; ***************************************************************************************
              	;
              	;								 Other data and buffers
              	;
              	; ***************************************************************************************
              	
86DA:         	__PAGEStackPointer: 								; stack used for switching pages
86DA: 0000    			dw 		0
86DC:         	__PAGEStackBase:
86DC: FFFFFFFF			ds 		16
86E0: FF...   	
              	
86EC:         	FreeMemory:		
86EC: FFFFFFFF			org 	$C000 								; empty dictionary.
86F0: FF...   	
C000: 00      			db 		0
              			


; +++ segments +++

#CODE          = $8000 = 32768,  size = $4001 = 16385

; +++ global symbols +++

AlternateFont         = $83B6 = 33718          kernel.asm:53
Boot                  = $8006 = 32774          kernel.asm:29
BootAddress           = $86C2 = 34498          data.asm:28
BootPage              = $86C4 = 34500          data.asm:30
DictionaryPage        = $0020 =    32          kernel.asm:16 (unused)
DisplayInfo           = $86BE = 34494          data.asm:26 (unused)
EditBuffer            = $7B08 = 31496          kernel.asm:21 (unused)
FARCompileByte        = $8068 = 32872          farmemory.asm:18
FARCompileWord        = $8080 = 32896          farmemory.asm:40 (unused)
FirstCodePage         = $0022 =    34          kernel.asm:17
FreeMemory            = $86EC = 34540          data.asm:65
GFXInitialise48k      = $81E2 = 33250          screen48k.asm:19
GFXInitialiseLayer2   = $825A = 33370          screen_layer2.asm:19
GFXInitialiseLowRes   = $8311 = 33553          screen_lores.asm:18
GFXPrintCharacter48k  = $820E = 33294          screen48k.asm:53
GFXPrintCharacterLayer2 = $828A = 33418          screen_layer2.asm:55
GFXPrintCharacterLowRes = $833B = 33595          screen_lores.asm:50
GFXWriteHexWordA      = $80E5 = 32997          graphics.asm:83 (unused)
Here                  = $86B6 = 34486          data.asm:20
HerePage              = $86B8 = 34488          data.asm:22
IOScanKeyboard        = $8115 = 33045          keyboard.asm:19 (unused)
L2PClear              = $8263 = 33379          screen_layer2.asm:26
L2PClearBank          = $8272 = 33394          screen_layer2.asm:34
LowClearScreen        = $8324 = 33572          screen_lores.asm:30
NextFreePage          = $86BA = 34490          data.asm:24 (unused)
PAGEInitialise        = $8027 = 32807          paging.asm:18
PAGERestore           = $8052 = 32850          paging.asm:66
PAGESwitch            = $8039 = 32825          paging.asm:37
SIFontBase            = $86D6 = 34518          data.asm:49
SIScreenDriver        = $86D8 = 34520          data.asm:51
SIScreenHeight        = $86CE = 34510          data.asm:45
SIScreenMode          = $86D2 = 34514          data.asm:47
SIScreenWidth         = $86CA = 34506          data.asm:43
SYS_GFX_SetMode       = $80A6 = 32934          graphics.asm:18 (unused)
SYS_GFX_Write         = $80D0 = 32976          graphics.asm:58
SYS_GFX_WriteHex      = $80E3 = 32995          graphics.asm:81 (unused)
SYS_MacroExpander     = $809B = 32923          farmemory.asm:65 (unused)
SYS_Page_Restore      = $8052 = 32850          paging.asm:65 (unused)
SYS_Page_Switch       = $8039 = 32825          paging.asm:36 (unused)
StackDefault          = $86C6 = 34502          data.asm:32
StackTop              = $7EFC = 32508          kernel.asm:22
StopDefault           = $8024 = 32804          kernel.asm:42
Sys_DisplayInformation = $86CA = 34506          data.asm:41 (unused)
Sys_SystemInformation = $86B6 = 34486          data.asm:18
__GFXConfigure        = $80C0 = 32960          graphics.asm:39
__GFXLayer2           = $80B8 = 32952          graphics.asm:32
__GFXLowRes           = $80BD = 32957          graphics.asm:36
__GFXWCExit           = $80DE = 32990          graphics.asm:68
__GFXWHByte           = $80F7 = 33015          graphics.asm:99
__GFXWHDigit          = $810D = 33037          graphics.asm:113
__GFXWHNibble         = $8104 = 33028          graphics.asm:107
__L2Exit              = $830A = 33546          screen_layer2.asm:156
__L2Loop              = $82FB = 33531          screen_layer2.asm:143
__L2Not1              = $82A6 = 33446          screen_layer2.asm:77
__L2Not2              = $82AC = 33452          screen_layer2.asm:81
__L2Not3              = $82B2 = 33458          screen_layer2.asm:85
__L2NotCursor         = $82BD = 33469          screen_layer2.asm:94
__L2NotSet            = $8301 = 33537          screen_layer2.asm:148
__L2Outer             = $82F2 = 33522          screen_layer2.asm:137
__LPExit              = $83AF = 33711          screen_lores.asm:143
__LowLoop             = $839B = 33691          screen_lores.asm:127
__LowNotLower2        = $8390 = 33680          screen_lores.asm:119
__LowNotReverse       = $835D = 33629          screen_lores.asm:79
__LowNotSet           = $83A1 = 33697          screen_lores.asm:132
__LowOuter            = $8392 = 33682          screen_lores.asm:121
__MacroCopy           = $809D = 32925          farmemory.asm:68
__PAGEStackBase       = $86DC = 34524          data.asm:62
__PAGEStackPointer    = $86DA = 34522          data.asm:60
__ZXWCCopy            = $824E = 33358          screen48k.asm:115
__ZXWCExit            = $8255 = 33365          screen48k.asm:122
___kr4                = $8146 = 33094          keyboard.asm:50
__cs1                 = $81F2 = 33266          screen48k.asm:29
__cs2                 = $81FA = 33274          screen48k.asm:34
__kr1                 = $812A = 33066          keyboard.asm:33
__kr2                 = $8135 = 33077          keyboard.asm:39
__kr3                 = $8137 = 33079          keyboard.asm:42
__kr_exit             = $8166 = 33126          keyboard.asm:80
__kr_keypressed       = $8160 = 33120          keyboard.asm:74
__kr_no_shift_table   = $816A = 33130          keyboard.asm:95
__kr_shift_table      = $8192 = 33170          keyboard.asm:101
__kr_symbol_shift_table = $81BA = 33210          keyboard.asm:107
_end                  = $C001 = 49153          kernel.asm:23 (unused)
_size                 = $4001 = 16385          kernel.asm:23 (unused)


total time: 0.0033 sec.
no errors
