              	; --------------------------------------
              	; zasm: assemble "kernel.asm"
              	; date: 2019-01-13 23:16:29
              	; --------------------------------------


              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;    Name :     kernel.asm
              	;    Author :  Paul Robson (paul@robsons.org.uk)
              	;    Date :     13th January 2019
              	;    Purpose :  Machine Forth Kernel
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
0020:         	DictionaryPage = $20                 ; dictionary page
0022:         	FirstCodePage = $22                 ; first code page.
              	;
              	;    Memory allocated from the Unused space in $4000-$7FFF
              	;
7EFC:         	StackTop = $7EFC                   ;      -$7EFC Top of stack
              	
8000:         	    org   $8000                 ; $8000 boot.
8000: 1804    	    jr     Boot
8002: FFFF    	    org   $8004                 ; $8004 address of sysinfo
8004: 2780    	    dw     SystemInformation
              	
8006: ED7B3780	Boot:  ld     sp,(StackDefault)          ; reset Z80 Stack
800A: DD01    	    db     $DD,$01
800C: F3      	    di                      ; disable interrupts
800D: ED910702	    db     $ED,$91,7,2              ; set turbo port (7) to 2 (14Mhz speed)
8011: 3E01    	    ld     a,1                 ; blue border
8013: D3FE    	    out   ($FE),a
8015: 3E22    	    ld     a,FirstCodePage           ; get the page to start
8017: CDDF85  	    call   PAGEInitialise
801A: 3A3580  	    ld     a,(BootPage)            ; switch to boot page.
801D: CDDF85  	    call   PAGEInitialise
8020: 2A3380  	    ld     hl,(BootAddress)          ; start address
8023: E9      	    jp     (hl)
              	
8024:         	StopDefault:
8024: C32480  	    jp     StopDefault
              	
              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;    Name :     data.asm
              	;    Author :  Paul Robson (paul@robsons.org.uk)
              	;    Date :     13th January 2019
              	;    Purpose :  Data area
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
              	; ***************************************************************************************
              	;
              	;                System Information
              	;
              	; ***************************************************************************************
              	
8027:         	SystemInformation:
              	
8027:         	Here:                        ; +0   Here
8027: F487    	    dw     FreeMemory
8029:         	HerePage:                       ; +2  Here.Page
8029: 2200    	    db     FirstCodePage,0
802B:         	NextFreePage:                     ; +4   Next available code page (2 8k pages/page)
802B: 24000000	    db     FirstCodePage+2,0,0,0
802F:         	DisplayInfo:                     ; +8   Display information
802F: 3B800000	    dw     DisplayInformation,0
8033:         	BootAddress:                    ; +12   Boot Address
8033: 2480    	    dw     StopDefault
8035:         	BootPage:                      ; +14   Boot Page
8035: 2200    	    db     FirstCodePage,0
8037:         	StackDefault:                     ; +16   Initial value of stack.
8037: FC7E0000	    dw     StackTop,0
              	
              	; ***************************************************************************************
              	;
              	;               Display system information
              	;
              	; ***************************************************************************************
              	
803B:         	DisplayInformation:
              	
803B:         	SIScreenWidth:                     ; +0   screen width
803B: 00000000	    db     0,0,0,0
803F:         	SIScreenHeight:                    ; +4   screen height
803F: 00000000	    db     0,0,0,0
8043:         	SIScreenMode:                    ; +8   current mode
8043: 00000000	    db     0,0,0,0
8047:         	SIFontBase:                      ; +12   font in use
8047: 6581    	    dw     AlternateFont
8049:         	SIScreenDriver:                    ; +16   Screen Driver
8049: 0000    	    dw     0
              	
              	; ***************************************************************************************
              	;
              	;                 Other data and buffers
              	;
              	; ***************************************************************************************
              	
804B:         	__PAGEStackPointer:                 ; stack used for switching pages
804B: 0000    	    dw     0
804D:         	__PAGEStackBase:
804D: FFFFFFFF	    ds     16
8051: FF...   	
              	
              	
              	; *********************************************************************************************
              	; *********************************************************************************************
              	;
              	;    Name :     core.asm
              	;    Date :    13th January 2019
              	;    Author :   Paul Robson (paul@robsons.org.uk)
              	;    Purpose :  Core words for the Machine Forth system
              	;
              	; *********************************************************************************************
              	; *********************************************************************************************
              	;
              	;    Notes :   TOS cached in DE
              	;          A is HL
              	;          No real return stack.
              	;          * implemented directly.
              	;
              	;    Missing :  ;       handled by compiler
              	;          pop/push   short term working stack, seperate.
              	;          @R+,!R+    make no sense because of single stack.
              	;
              	;    To Add :   b versions of !a !a+ @a @a+ @ ! , port access functions.
              	;
              	; *********************************************************************************************
              	
              	; *********************************************************************************************
              	;                   @a+ read A and increment
              	; *********************************************************************************************
              	
805D:         	define_40_61_2b:
805D: CD9884  		call FARMacroExpander
8060: 05      		db end_40_61_2b-start_40_61_2b
8061:         	start_40_61_2b:
8061: D5      	    push   de                   ; save current TOS
8062: 5E      	    ld     e,(hl)                 ; read new TOS
8063: 23      	    inc   hl
8064: 56      	    ld     d,(hl)
8065: 23      	    inc   hl
8066:         	end_40_61_2b:
              	
              	; *********************************************************************************************
              	;                       @a read A
              	; *********************************************************************************************
              	
8066:         	define_40_61:
8066: CD9884  		call FARMacroExpander
8069: 05      		db end_40_61-start_40_61
806A:         	start_40_61:
806A: D5      	    push   de                   ; save current TOS
806B: 5E      	    ld     e,(hl)                ; read new TOS
806C: 23      	    inc   hl
806D: 56      	    ld     d,(hl)
806E: 2B      	    dec   hl
806F:         	end_40_61:
              	
              	; *********************************************************************************************
              	;                !a+ write TOS to A and increment
              	; *********************************************************************************************
              	
806F:         	define_21_61_2b:
806F: CD9884  		call FARMacroExpander
8072: 05      		db end_21_61_2b-start_21_61_2b
8073:         	start_21_61_2b:
8073: 73      	    ld     (hl),e                 ; write out
8074: 23      	    inc   hl
8075: 72      	    ld     (hl),d
8076: 23      	    inc   hl
8077: D1      	    pop   de                   ; update TOS
8078:         	end_21_61_2b:
              	
              	; *********************************************************************************************
              	;                    !a write TOS to A
              	; *********************************************************************************************
              	
8078:         	define_21_61:
8078: CD9884  		call FARMacroExpander
807B: 05      		db end_21_61-start_21_61
807C:         	start_21_61:
807C: 73      	    ld     (hl),e                 ; write out
807D: 23      	    inc   hl
807E: 72      	    ld     (hl),d
807F: 2B      	    dec    hl
8080: D1      	    pop   de                   ; update TOS
8081:         	end_21_61:
              	
              	; *********************************************************************************************
              	;                    com one's complement
              	; *********************************************************************************************
              	
8081:         	define_63_6f_6d:
8081: 7A      	    ld     a,d
8082: 2F      	    cpl
8083: 57      	    ld     d,a
8084: 7B      	    ld     a,e
8085: 2F      	    cpl
8086: 5F      	    ld     e,a
8087: C9      		ret
              	
              	; *********************************************************************************************
              	;                    2* double TOS
              	; *********************************************************************************************
              	
8088:         	define_32_2a:
8088: CD9884  		call FARMacroExpander
808B: 03      		db end_32_2a-start_32_2a
808C:         	start_32_2a:
808C: EB      	    ex     de,hl
808D: 29      	    add   hl,hl
808E: EB      	    ex     de,hl
808F:         	end_32_2a:
              	
              	; *********************************************************************************************
              	;                   2/ halve TOS unsigned
              	; *********************************************************************************************
              	
808F:         	define_32_2f:
808F: CD9884  		call FARMacroExpander
8092: 04      		db end_32_2f-start_32_2f
8093:         	start_32_2f:
8093: CB3A    	    srl   d
8095: CB1B    	    rr     e
8097:         	end_32_2f:
              	
              	; *********************************************************************************************
              	;                     * multiplier
              	; *********************************************************************************************
              	
8097:         	define_2a:
8097: DDE1    		pop ix
8099: C1      	    pop   bc               ; multiplicand.
809A: E5      	    push   hl               ; save A
809B: 210000  	    ld     hl,$0000           ; result.
809E:         	__multiply_loop:
809E: CB41    	    bit   0,c             ; check bit 0.
80A0: 2801    	    jr     z,__multiply_noadd       ; don't add if 0
80A2: 19      	    add   hl,de             ; add to total
80A3:         	__multiply_noadd:
80A3: EB      	    ex     de,hl             ; shift DE left
80A4: 29      	    add   hl,hl
80A5: EB      	    ex     de,hl             ; shift BC right
80A6: CB38    	    srl   b
80A8: CB19    	    rr     c
80AA: 78      	    ld     a,b             ; go back if not done
80AB: B1      	    or     c
80AC: 20F0    	    jr     nz,__multiply_loop
80AE: EB      	    ex     de,hl             ; result in DE (top of stack)
80AF: E1      	    pop   hl               ; restore A
80B0: DDE9    		jp (ix)
              	
              	; *********************************************************************************************
              	;                     -or exclusive OR
              	; *********************************************************************************************
              	
80B2:         	define_2d_6f_72:
80B2: DDE1    		pop ix
80B4: C1      	    pop   bc
80B5: 7A      	    ld     a,d
80B6: A8      	    xor   b
80B7: 57      	    ld     d,a
80B8: 7B      	    ld     a,e
80B9: A9      	    xor   c
80BA: 5F      	    ld     e,a
80BB: DDE9    		jp (ix)
              	
              	; *********************************************************************************************
              	;                     and logical AND
              	; *********************************************************************************************
              	
80BD:         	define_61_6e_64:
80BD: DDE1    		pop ix
80BF: C1      	    pop   bc
80C0: 7A      	    ld     a,d
80C1: A0      	    and   b
80C2: 57      	    ld     d,a
80C3: 7B      	    ld     a,e
80C4: A1      	    and   c
80C5: 5F      	    ld     e,a
80C6: DDE9    		jp (ix)
              	
              	; *********************************************************************************************
              	;                     + add
              	; *********************************************************************************************
              	
80C8:         	define_2b:
80C8: CD9884  		call FARMacroExpander
80CB: 04      		db end_2b-start_2b
80CC:         	start_2b:
80CC: EB      	    ex     de,hl
80CD: C1      	    pop   bc
80CE: 09      	    add   hl,bc
80CF: EB      	    ex     de,hl
80D0:         	end_2b:
              	
              	; *********************************************************************************************
              	;                     A@ copy A to stack
              	; *********************************************************************************************
              	
80D0:         	define_41_40:
80D0: CD9884  		call FARMacroExpander
80D3: 03      		db end_41_40-start_41_40
80D4:         	start_41_40:
80D4: D5      	    push   de                   ; save old TOS
80D5: 5D      	    ld     e,l                 ; copy A into TOS
80D6: 54      	    ld     d,h
80D7:         	end_41_40:
              	
              	; *********************************************************************************************
              	;                    dup Duplicate TOS
              	; *********************************************************************************************
              	
80D7:         	define_64_75_70:
80D7: CD9884  		call FARMacroExpander
80DA: 01      		db end_64_75_70-start_64_75_70
80DB:         	start_64_75_70:
80DB: D5      	    push   de
80DC:         	end_64_75_70:
              	
              	; *********************************************************************************************
              	;                    over, 2nd copied to TOS.
              	; *********************************************************************************************
              	
80DC:         	define_6f_76_65_72:
80DC: CD9884  		call FARMacroExpander
80DF: 05      		db end_6f_76_65_72-start_6f_76_65_72
80E0:         	start_6f_76_65_72:
80E0: C1      	    pop   bc                   ; 2nd on stack
80E1: C5      	    push   bc                   ; put back
80E2: D5      	    push   de                   ; save TOS
80E3: 58      	    ld     e,b                 ; copy 2nd value into DE
80E4: 51      	    ld     d,c
80E5:         	end_6f_76_65_72:
              	
              	; *********************************************************************************************
              	;                    A! copy stack to A
              	; *********************************************************************************************
              	
80E5:         	define_41_21:
80E5: CD9884  		call FARMacroExpander
80E8: 02      		db end_41_21-start_41_21
80E9:         	start_41_21:
80E9: EB      	    ex     de,hl                 ; TOS in HL
80EA: D1      	    pop   de                   ; update TOS
80EB:         	end_41_21:
              	
              	; *********************************************************************************************
              	;                    drop Drop TOS
              	; *********************************************************************************************
              	
80EB:         	define_64_72_6f_70:
80EB: CD9884  		call FARMacroExpander
80EE: 01      		db end_64_72_6f_70-start_64_72_6f_70
80EF:         	start_64_72_6f_70:
80EF: D1      	    pop   de
80F0:         	end_64_72_6f_70:
              	
              	; *********************************************************************************************
              	; *********************************************************************************************
              	;
              	;    Name :     extensions.asm
              	;    Date :    13th January 2019
              	;    Author :   Paul Robson (paul@robsons.org.uk)
              	;    Purpose :  Core extensions
              	;
              	; *********************************************************************************************
              	; *********************************************************************************************
              	
              	; *********************************************************************************************
              	;                   b@a+ read byte A and increment
              	; *********************************************************************************************
              	
80F0:         	define_62_40_61_2b:
80F0: CD9884  		call FARMacroExpander
80F3: 05      		db end_62_40_61_2b-start_62_40_61_2b
80F4:         	start_62_40_61_2b:
80F4: D5      	    push   de                   ; save current TOS
80F5: 5E      	    ld     e,(hl)                 ; read new TOS
80F6: 23      	    inc   hl
80F7: 1600    	    ld     d,$00
80F9:         	end_62_40_61_2b:
              	
              	; *********************************************************************************************
              	;                       b@a byte read A
              	; *********************************************************************************************
              	
80F9:         	define_62_40_61:
80F9: CD9884  		call FARMacroExpander
80FC: 04      		db end_62_40_61-start_62_40_61
80FD:         	start_62_40_61:
80FD: D5      	    push   de                   ; save current TOS
80FE: 5E      	    ld     e,(hl)                ; read new TOS
80FF: 1600    	    ld     d,$00
8101:         	end_62_40_61:
              	
              	; *********************************************************************************************
              	;                b!a+ byte write TOS to A and increment
              	; *********************************************************************************************
              	
8101:         	define_62_21_61_2b:
8101: CD9884  		call FARMacroExpander
8104: 03      		db end_62_21_61_2b-start_62_21_61_2b
8105:         	start_62_21_61_2b:
8105: 73      	    ld     (hl),e                 ; write out
8106: 23      	    inc   hl
8107: D1      	    pop   de                   ; update TOS
8108:         	end_62_21_61_2b:
              	
              	; *********************************************************************************************
              	;                  b!a byte write TOS to A
              	; *********************************************************************************************
              	
8108:         	define_62_21_61:
8108: CD9884  		call FARMacroExpander
810B: 02      		db end_62_21_61-start_62_21_61
810C:         	start_62_21_61:
810C: 73      	    ld     (hl),e                 ; write out
810D: D1      	    pop   de                   ; update TOS
810E:         	end_62_21_61:
              	
              	; *********************************************************************************************
              	;                  b@ byte indirect read
              	; *********************************************************************************************
              	
810E:         	define_62_40:
810E: CD9884  		call FARMacroExpander
8111: 04      		db end_62_40-start_62_40
8112:         	start_62_40:
8112: EB      	    ex     de,hl                 ; address to HL
8113: 5E      	    ld     e,(hl)                ; read it
8114: 1600    	    ld     d,$00
8116:         	end_62_40:
              	
              	; *********************************************************************************************
              	;                  b! byte indirect write
              	; *********************************************************************************************
              	
8116:         	define_62_21:
8116: CD9884  		call FARMacroExpander
8119: 04      		db end_62_21-start_62_21
811A:         	start_62_21:
811A: EB      	    ex     de,hl                 ; address to HL
811B: D1      	    pop   de                   ; data to DE
811C: 73      	    ld     (hl),e                 ; write it
811D: D1      	    pop   de                   ; fix up TOS
811E:         	end_62_21:
              	
              	; *********************************************************************************************
              	;                  nip drop second on stack
              	; *********************************************************************************************
              	
811E:         	define_6e_69_70:
811E: CD9884  		call FARMacroExpander
8121: 01      		db end_6e_69_70-start_6e_69_70
8122:         	start_6e_69_70:
8122: C1      	    pop   bc
8123:         	end_6e_69_70:
              	; *********************************************************************************************
              	; *********************************************************************************************
              	;
              	;    Name :     graphics.asm
              	;    Date :    13th January 2019
              	;    Author :   Paul Robson (paul@robsons.org.uk)
              	;    Purpose :  Kernel Graphics Words
              	;
              	; *********************************************************************************************
              	; *********************************************************************************************
              	
              	; *********************************************************************************************
              	;                  Set Graphics Mode
              	; *********************************************************************************************
              	
8123:         	define_67_66_78_2e_72_61_77_2e_73_65_74_6d_6f_64_65:
8123: DDE1    		pop ix
8125: 7B      	    ld     a,e
8126: CDA384  	    call   SYS_GFX_SetMode
8129: D1      	    pop   de
812A: DDE9    		jp (ix)
              	
              	; *********************************************************************************************
              	;                 Write to display (raw)
              	; *********************************************************************************************
              	
812C:         	define_67_66_78_2e_72_61_77_2e_77_72_69_74_65:
812C: DDE1    		pop ix
812E: EB      	    ex     de,hl
812F: D1      	    pop   de
8130: CDCD84  	    call  SYS_GFX_Write
8133: D1      	    pop   de
8134: DDE9    		jp (ix)
              	
              	; *********************************************************************************************
              	;                Write to display (hex)
              	; *********************************************************************************************
              	
8136:         	define_67_66_78_2e_72_61_77_2e_77_72_69_74_65_68_65_78:
8136: DDE1    		pop ix
8138: EB      	    ex     de,hl
8139: D1      	    pop   de
813A: CDE084  	    call  SYS_GFX_WriteHex
813D: D1      	    pop   de
813E: DDE9    		jp (ix)
              	; *********************************************************************************************
              	; *********************************************************************************************
              	;
              	;    Name :     standard.asm
              	;    Date :    13th January 2019
              	;    Author :   Paul Robson (paul@robsons.org.uk)
              	;    Purpose :  Normal macro words for the Machine Forth system
              	;
              	; *********************************************************************************************
              	; *********************************************************************************************
              	
              	; *********************************************************************************************
              	;                  @ indirect read
              	; *********************************************************************************************
              	
8140:         	define_40:
8140: CD9884  		call FARMacroExpander
8143: 05      		db end_40-start_40
8144:         	start_40:
8144: EB      	    ex     de,hl                 ; address to HL
8145: 5E      	    ld     e,(hl)                ; read it
8146: 23      	    inc   hl
8147: 56      	    ld     d,(hl)
8148: 2B      	    dec   hl
8149:         	end_40:
              	
              	; *********************************************************************************************
              	;                  ! indirect write
              	; *********************************************************************************************
              	
8149:         	define_21:
8149: CD9884  		call FARMacroExpander
814C: 06      		db end_21-start_21
814D:         	start_21:
814D: EB      	    ex     de,hl                 ; address to HL
814E: D1      	    pop   de                   ; data to DE
814F: 73      	    ld     (hl),e                 ; write it
8150: 23      	    inc   hl
8151: 72      	    ld     (hl),d
8152: D1      	    pop   de                   ; fix up TOS
8153:         	end_21:
              	
              	; *********************************************************************************************
              	;                     or logical OR
              	; *********************************************************************************************
              	
8153:         	define_6f_72:
8153: DDE1    		pop ix
8155: C1      	    pop   bc
8156: 7A      	    ld     a,d
8157: B0      	    or     b
8158: 57      	    ld     d,a
8159: 7B      	    ld     a,e
815A: B1      	    or     c
815B: 5F      	    ld     e,a
815C: DDE9    		jp (ix)
              	
              	; *********************************************************************************************
              	;                     swap exchange top 2
              	; *********************************************************************************************
              	
815E:         	define_73_77_61_70:
815E: CD9884  		call FARMacroExpander
8161: 03      		db end_73_77_61_70-start_73_77_61_70
8162:         	start_73_77_61_70:
8162: EB      	    ex     de,hl                 ; HL = tos
8163: E3      	    ex     (sp),hl               ; swap it
8164: EB      	    ex     de,hl                 ; fix up
8165:         	end_73_77_61_70:
              	
8165:         	AlternateFont:                    ; nicer font
8165: 00000000	  db 0,0,0,0,0,0,0,0,12,30,30,12,12,0,12,0,54,54,0,0,0,0,0,0,54,54,127,54,127,54,54,0,24,62,96,60,6,124,24,0,0,99,102,12,24,51,99,0,28,54,28,59,110,102,59,0,48,48,96,0,0,0,0,0,12,24,48,48,48,24,12,0,48,24,12,12,12,24,48,0,0,51,30,127,30,51,0,0,0,24,24,126,24,24,0,0,0,0,0,0,0,24,24,48,0,0,0,126,0,0,0,0,0,0,0,0,0,24,24,0,3,6,12,24,48,96,64,0,62,99,103,111,123,115,62,0,24,56,24,24,24,24,126,0,60,102,6,28,48,102,126,0,60,102,6,28,6,102,60,0,14,30,54,102,127,6,15,0,126,96,124,6,6,102,60,0,28,48,96,124,102,102,60,0,126,102,6,12,24,24,24,0,60,102,102,60,102,102,60,0,60,102,102,62,6,12,56,0,0,24,24,0,0,24,24,0,0,24,24,0,0,24,24,48,12,24,48,96,48,24,12,0,0,0,126,0,0,126,0,0,48,24,12,6,12,24,48,0,60,102,6,12,24,0,24,0,62,99,111,111,111,96,60,0,24,60,102,102,126,102,102,0,126,51,51,62,51,51,126,0,30,51,96,96,96,51,30,0,124,54,51,51,51,54,124,0,127,49,52,60,52,49,127,0,127,49,52,60,52,48,120,0,30,51,96,96,103,51,31,0,102,102,102,126,102,102,102,0,60,24,24,24,24,24,60,0,15,6,6,6,102,102,60,0,115,51,54,60,54,51,115,0,120,48,48,48,49,51,127,0,99,119,127,127,107,99,99,0,99,115,123,111,103,99,99,0,28,54,99,99,99,54,28,0,126,51,51,62,48,48,120,0,60,102,102,102,110,60,14,0,126,51,51,62,54,51,115,0,60,102,112,56,14,102,60,0,126,90,24,24,24,24,60,0,102,102,102,102,102,102,126,0,102,102,102,102,102,60,24,0,99,99,99,107,127,119,99,0,99,99,54,28,28,54,99,0,102,102,102,60,24,24,60,0,127,99,70,12,25,51,127,0,60,48,48,48,48,48,60,0,96,48,24,12,6,3,1,0,60,12,12,12,12,12,60,0,8,28,54,99,0,0,0,0,0,0,0,0,0,0,0,127,24,24,12,0,0,0,0,0,0,0,60,6,62,102,59,0,112,48,48,62,51,51,110,0,0,0,60,102,96,102,60,0,14,6,6,62,102,102,59,0,0,0,60,102,126,96,60,0,28,54,48,120,48,48,120,0,0,0,59,102,102,62,6,124,112,48,54,59,51,51,115,0,24,0,56,24,24,24,60,0,6,0,6,6,6,102,102,60,112,48,51,54,60,54,115,0,56,24,24,24,24,24,60,0,0,0,102,127,127,107,99,0,0,0,124,102,102,102,102,0,0,0,60,102,102,102,60,0,0,0,110,51,51,62,48,120,0,0,59,102,102,62,6,15,0,0,110,59,51,48,120,0,0,0,62,96,60,6,124,0,8,24,62,24,24,26,12,0,0,0,102,102,102,102,59,0,0,0,102,102,102,60,24,0,0,0,99,107,127,127,54,0,0,0,99,54,28,54,99,0,0,0,102,102,102,62,6,124,0,0,126,76,24,50,126,0,14,24,24,112,24,24,14,0,12,12,12,0,12,12,12,0,112,24,24,14,24,24,112,0,59,110,0,0,0,0,0,0,0,0,0,0,0,0,0,0
8169: 00000000	
816D: 0C1E1E0C	
8171: 0C000C00	
8175: 36360000	
8179: 00000000	
817D: 36367F36	
8181: 7F363600	
8185: 183E603C	
8189: 067C1800	
818D: 0063660C	
8191: 18336300	
8195: 1C361C3B	
8199: 6E663B00	
819D: 30306000	
81A1: 00000000	
81A5: 0C183030	
81A9: 30180C00	
81AD: 30180C0C	
81B1: 0C183000	
81B5: 00331E7F	
81B9: 1E330000	
81BD: 0018187E	
81C1: 18180000	
81C5: 00000000	
81C9: 00181830	
81CD: 0000007E	
81D1: 00000000	
81D5: 00000000	
81D9: 00181800	
81DD: 03060C18	
81E1: 30604000	
81E5: 3E63676F	
81E9: 7B733E00	
81ED: 18381818	
81F1: 18187E00	
81F5: 3C66061C	
81F9: 30667E00	
81FD: 3C66061C	
8201: 06663C00	
8205: 0E1E3666	
8209: 7F060F00	
820D: 7E607C06	
8211: 06663C00	
8215: 1C30607C	
8219: 66663C00	
821D: 7E66060C	
8221: 18181800	
8225: 3C66663C	
8229: 66663C00	
822D: 3C66663E	
8231: 060C3800	
8235: 00181800	
8239: 00181800	
823D: 00181800	
8241: 00181830	
8245: 0C183060	
8249: 30180C00	
824D: 00007E00	
8251: 007E0000	
8255: 30180C06	
8259: 0C183000	
825D: 3C66060C	
8261: 18001800	
8265: 3E636F6F	
8269: 6F603C00	
826D: 183C6666	
8271: 7E666600	
8275: 7E33333E	
8279: 33337E00	
827D: 1E336060	
8281: 60331E00	
8285: 7C363333	
8289: 33367C00	
828D: 7F31343C	
8291: 34317F00	
8295: 7F31343C	
8299: 34307800	
829D: 1E336060	
82A1: 67331F00	
82A5: 6666667E	
82A9: 66666600	
82AD: 3C181818	
82B1: 18183C00	
82B5: 0F060606	
82B9: 66663C00	
82BD: 7333363C	
82C1: 36337300	
82C5: 78303030	
82C9: 31337F00	
82CD: 63777F7F	
82D1: 6B636300	
82D5: 63737B6F	
82D9: 67636300	
82DD: 1C366363	
82E1: 63361C00	
82E5: 7E33333E	
82E9: 30307800	
82ED: 3C666666	
82F1: 6E3C0E00	
82F5: 7E33333E	
82F9: 36337300	
82FD: 3C667038	
8301: 0E663C00	
8305: 7E5A1818	
8309: 18183C00	
830D: 66666666	
8311: 66667E00	
8315: 66666666	
8319: 663C1800	
831D: 6363636B	
8321: 7F776300	
8325: 6363361C	
8329: 1C366300	
832D: 6666663C	
8331: 18183C00	
8335: 7F63460C	
8339: 19337F00	
833D: 3C303030	
8341: 30303C00	
8345: 6030180C	
8349: 06030100	
834D: 3C0C0C0C	
8351: 0C0C3C00	
8355: 081C3663	
8359: 00000000	
835D: 00000000	
8361: 0000007F	
8365: 18180C00	
8369: 00000000	
836D: 00003C06	
8371: 3E663B00	
8375: 7030303E	
8379: 33336E00	
837D: 00003C66	
8381: 60663C00	
8385: 0E06063E	
8389: 66663B00	
838D: 00003C66	
8391: 7E603C00	
8395: 1C363078	
8399: 30307800	
839D: 00003B66	
83A1: 663E067C	
83A5: 7030363B	
83A9: 33337300	
83AD: 18003818	
83B1: 18183C00	
83B5: 06000606	
83B9: 0666663C	
83BD: 70303336	
83C1: 3C367300	
83C5: 38181818	
83C9: 18183C00	
83CD: 0000667F	
83D1: 7F6B6300	
83D5: 00007C66	
83D9: 66666600	
83DD: 00003C66	
83E1: 66663C00	
83E5: 00006E33	
83E9: 333E3078	
83ED: 00003B66	
83F1: 663E060F	
83F5: 00006E3B	
83F9: 33307800	
83FD: 00003E60	
8401: 3C067C00	
8405: 08183E18	
8409: 181A0C00	
840D: 00006666	
8411: 66663B00	
8415: 00006666	
8419: 663C1800	
841D: 0000636B	
8421: 7F7F3600	
8425: 00006336	
8429: 1C366300	
842D: 00006666	
8431: 663E067C	
8435: 00007E4C	
8439: 18327E00	
843D: 0E181870	
8441: 18180E00	
8445: 0C0C0C00	
8449: 0C0C0C00	
844D: 7018180E	
8451: 18187000	
8455: 3B6E0000	
8459: 00000000	
845D: 00...   	
              	
              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;    Name :     farmemory.asm
              	;    Author :  paul@robsons.org.uk
              	;    Date :     11th January 2019
              	;    Purpose :  Kernel - Far memory routines.
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
              	; ***********************************************************************************************
              	;
              	;                Byte compile far memory A
              	;
              	; ***********************************************************************************************
              	
8465:         	FARCompileByte:
8465: F5      	    push   af                   ; save byte and HL
8466: E5      	    push   hl
8467: F5      	    push   af                   ; save byte
8468: 3A2980  	    ld    a,(HerePage)             ; switch to page
846B: CDF185  	    call   PAGESwitch
846E: 2A2780  	    ld     hl,(Here)               ; write to memory location
8471: F1      	    pop   af
8472: 77      	    ld     (hl),a
8473: 23      	    inc   hl                   ; bump memory location
8474: 222780  	    ld     (Here),hl               ; write back
8477: CD0A86  	    call   PAGERestore
847A: E1      	    pop   hl                   ; restore and exit
847B: F1      	    pop   af
847C: C9      	    ret
              	
              	; ***********************************************************************************************
              	;
              	;                Word compile far memory HL
              	;
              	; ***********************************************************************************************
              	
847D:         	FARCompileWord:
847D: F5      	    push   af                   ; save byte and HL
847E: D5      	    push   de
847F: E5      	    push   hl
8480: EB      	    ex     de,hl                 ; word into DE
8481: 3A2980  	    ld    a,(HerePage)             ; switch to page
8484: CDF185  	    call   PAGESwitch
8487: 2A2780  	    ld     hl,(Here)               ; write to memory location
848A: 73      	    ld     (hl),e
848B: 23      	    inc   hl
848C: 72      	    ld     (hl),d
848D: 23      	    inc   hl
848E: 222780  	    ld     (Here),hl               ; write back
8491: CD0A86  	    call   PAGERestore
8494: E1      	    pop   hl
8495: D1      	    pop   de                   ; restore and exit
8496: F1      	    pop   af
8497: C9      	    ret
              	
              	; ***********************************************************************************************
              	;
              	;                Expand macro during compilation
              	;
              	; ***********************************************************************************************
              	
8498:         	FARMacroExpander:
8498: E3      	    ex     (sp),hl               ; old HL on stack, following byte address in HL
8499: 46      	    ld     b,(hl)                ; get count
849A:         	__MacroCopy:
849A: 23      	    inc   hl                   ; get next
849B: 7E      	    ld    a,(hl)
849C: CD6584  	    call   FARCompileByte             ; compile it
849F: 10F9    	    djnz   __MacroCopy
84A1: E1      	    pop   hl                   ; restore old HL
84A2: C9      	    ret
              	; *********************************************************************************
              	; *********************************************************************************
              	;
              	;    File:    graphics.asm
              	;    Purpose:  General screen I/O routines
              	;    Date :     5th January 2019
              	;    Author:    paul@robsons.org.uk
              	;
              	; *********************************************************************************
              	; *********************************************************************************
              	
              	; *********************************************************************************
              	;
              	;                Set Graphics Mode to L
              	;
              	; *********************************************************************************
              	
84A3:         	SYS_GFX_SetMode:
84A3: C5      	    push   bc
84A4: D5      	    push   de
84A5: E5      	    push   hl
84A6: 7D      	    ld     a,l                 ; save new mode.
84A7: 324380  	    ld     (SIScreenMode),a
84AA: 2D      	    dec   l                   ; L = 1 mode layer2
84AB: 2808    	    jr     z,__GFXLayer2
84AD: 2D      	    dec   l
84AE: 280A    	    jr     z,__GFXLowRes             ; L = 2 mode lowres
              	
84B0: CD2086  	    call   GFXInitialise48k          ; L = 0 or anything else, 48k mode.
84B3: 1808    	    jr     __GFXConfigure
              	
84B5:         	__GFXLayer2:
84B5: CD9886  	    call   GFXInitialiseLayer2
84B8: 1803    	    jr     __GFXConfigure
              	
84BA:         	__GFXLowRes:
84BA: CD4F87  	    call   GFXInitialiseLowRes
              	
84BD:         	__GFXConfigure:
84BD: 7D      	    ld     a,l                 ; save screen size
84BE: 323B80  	    ld     (SIScreenWidth),a
84C1: 7C      	    ld     a,h
84C2: 323F80  	    ld     (SIScreenHeight),a
84C5: EB      	    ex     de,hl                 ; save driver
84C6: 224980  	    ld     (SIScreenDriver),hl
              	
84C9: E1      	    pop   hl
84CA: D1      	    pop   de
84CB: C1      	    pop   bc
84CC: C9      	    ret
              	
              	; *********************************************************************************
              	;
              	;    Write character D (colour) E (character) to position HL.
              	;
              	; *********************************************************************************
              	
84CD:         	SYS_GFX_Write:
84CD: F5      	    push   af
84CE: C5      	    push   bc
84CF: D5      	    push   de
84D0: E5      	    push   hl
84D1: 01DB84  	    ld     bc,__GFXWCExit
84D4: C5      	    push   bc
84D5: ED4B4980	    ld     bc,(SIScreenDriver)
84D9: C5      	    push   bc
84DA: C9      	    ret
84DB:         	__GFXWCExit:
84DB: E1      	    pop   hl
84DC: D1      	    pop   de
84DD: C1      	    pop   bc
84DE: F1      	    pop   af
84DF: C9      	    ret
              	
              	; *********************************************************************************
              	;
              	;            Write hex word DE at position HL
              	;
              	; *********************************************************************************
              	
84E0:         	SYS_GFX_WriteHex:
84E0: 3E05    	    ld     a,5
84E2:         	GFXWriteHexWordA:
84E2: C5      	    push   bc
84E3: D5      	    push   de
84E4: E5      	    push   hl
84E5: 4F      	    ld     c,a
84E6: 7A      	    ld     a,d
84E7: D5      	    push   de
84E8: CDF484  	    call   __GFXWHByte
84EB: D1      	    pop   de
84EC: 7B      	    ld     a,e
84ED: CDF484  	    call  __GFXWHByte
84F0: E1      	    pop   hl
84F1: D1      	    pop   de
84F2: C1      	    pop   bc
84F3: C9      	    ret
              	
84F4:         	__GFXWHByte:
84F4: F5      	    push   af
84F5: CB0F    	    rrc   a
84F7: CB0F    	    rrc    a
84F9: CB0F    	    rrc   a
84FB: CB0F    	    rrc   a
84FD: CD0185  	    call   __GFXWHNibble
8500: F1      	    pop   af
8501:         	__GFXWHNibble:
8501: 51      	    ld     d,c
8502: E60F    	    and   15
8504: FE0A    	    cp     10
8506: 3802    	    jr     c,__GFXWHDigit
8508: C607    	    add    a,7
850A:         	__GFXWHDigit:
850A: C630    	    add   a,48
850C: 5F      	    ld     e,a
850D: CDCD84  	    call   SYS_GFX_Write
8510: 23      	    inc   hl
8511: C9      	    ret
              	; *********************************************************************************
              	; *********************************************************************************
              	;
              	;    File:    keyboard.asm
              	;    Purpose:  Spectrum Keyboard Interface
              	;    Date :     27th December 2018
              	;    Author:    paul@robsons.org.uk
              	;
              	; *********************************************************************************
              	; *********************************************************************************
              	
              	
              	; *********************************************************************************
              	;
              	;      Scan the keyboard, return currently pressed key code in A
              	;
              	; *********************************************************************************
              	
8512:         	IOScanKeyboard:
8512: C5      	    push   bc
8513: D5      	    push   de
8514: E5      	    push   hl
              	
8515: 216785  	    ld     hl,__kr_no_shift_table         ; firstly identify shift state.
              	
8518: 0EFE    	    ld     c,$FE                 ; check CAPS SHIFT (emulator : left shift)
851A: 06FE    	    ld     b,$FE
851C: ED78    	    in     a,(c)
851E: CB47    	    bit   0,a
8520: 2005    	    jr     nz,__kr1
8522: 218F85  	    ld     hl,__kr_shift_table
8525: 180B    	    jr     __kr2
8527:         	__kr1:
8527: 067F    	    ld     b,$7F                 ; check SYMBOL SHIFT (emulator : right shift)
8529: ED78    	    in     a,(c)
852B: CB4F    	    bit   1,a
852D: 2003    	    jr     nz,__kr2
852F: 21B785  	    ld     hl,__kr_symbol_shift_table
8532:         	__kr2:
              	
8532: 1EFE    	    ld     e,$FE                 ; scan pattern.
8534: 7B      	__kr3:  ld     a,e                 ; work out the mask, so we don't detect shift keys
8535: 161E    	    ld     d,$1E                 ; $FE row, don't check the least significant bit.
8537: FEFE    	    cp     $FE
8539: 2808    	    jr     z,___kr4
853B: 161D    	    ld     d,$01D                 ; $7F row, don't check the 2nd least significant bit
853D: FE7F    	    cp     $7F
853F: 2802    	    jr     z,___kr4
8541: 161F    	    ld     d,$01F                 ; check all bits.
8543:         	___kr4:
8543: 43      	    ld     b,e                 ; scan the keyboard
8544: 0EFE    	    ld     c,$FE
8546: ED78    	    in     a,(c)
8548: 2F      	    cpl                     ; make that active high.
8549: A2      	    and   d                    ; and with check value.
854A: 2011    	    jr     nz,__kr_keypressed           ; exit loop if key pressed.
              	
854C: 23      	    inc   hl                   ; next set of keyboard characters
854D: 23      	    inc   hl
854E: 23      	    inc   hl
854F: 23      	    inc   hl
8550: 23      	    inc   hl
              	
8551: 7B      	    ld     a,e                 ; get pattern
8552: 87      	    add   a,a                 ; shift left
8553: F601    	    or     1                   ; set bit 1.
8555: 5F      	    ld     e,a
              	
8556: FEFF    	    cp     $FF                 ; finished when all 1's.
8558: 20DA    	    jr     nz,__kr3
855A: AF      	    xor   a
855B: 1806    	    jr     __kr_exit               ; no key found, return with zero.
              	;
855D:         	__kr_keypressed:
855D: 23      	    inc   hl                  ; shift right until carry set
855E: 1F      	    rra
855F: 30FC    	    jr     nc,__kr_keypressed
8561: 2B      	    dec   hl                   ; undo the last inc hl
8562: 7E      	    ld     a,(hl)                 ; get the character number.
8563:         	__kr_exit:
8563: E1      	    pop   hl
8564: D1      	    pop   de
8565: C1      	    pop   bc
8566: C9      	    ret
              	
              	; *********************************************************************************
              	;               Keyboard Mapping Tables
              	; *********************************************************************************
              	;
              	;  $FEFE-$7FFE scan, bit 0-4, active low
              	;
              	;  3:Abort (Shift+Q) 8:Backspace 13:Return
              	;  27:Break 32-127: Std ASCII all L/C
              	;
8567:         	__kr_no_shift_table:
8567: 007A7863	    db     0,  'z','x','c','v',      'a','s','d','f','g'
856B: 76617364	
856F: 6667    	
8571: 71776572	    db     'q','w','e','r','t',      '1','2','3','4','5'
8575: 74313233	
8579: 3435    	
857B: 30393837	    db     '0','9','8','7','6',      'p','o','i','u','y'
857F: 36706F69	
8583: 7579    	
8585: 0D6C6B6A	    db     13, 'l','k','j','h',      ' ', 0, 'm','n','b'
8589: 6820006D	
858D: 6E62    	
              	
858F:         	__kr_shift_table:
858F: 003A003F	    db      0, ':', 0,  '?','/',      '~','|','\','{','}'
8593: 2F7E7C5C	
8597: 7B7D    	
8599: 0300003C	    db      3,  0,  0  ,'<','>',      '!','@','#','$','%'
859D: 3E214023	
85A1: 2425    	
85A3: 5F292827	    db     '_',')','(',"'",'&',      '"',';', 0, ']','['
85A7: 26223B00	
85AB: 5D5B    	
85AD: 1B3D2B2D	    db     27, '=','+','-','^',      ' ', 0, '.',',','*'
85B1: 5E20002E	
85B5: 2C2A    	
              	
85B7:         	__kr_symbol_shift_table:
85B7: 003A003F	    db     0,  ':',0  ,'?','/',      '~','|','\','{','}'
85BB: 2F7E7C5C	
85BF: 7B7D    	
85C1: 0300003C	    db     3,  0,  0  ,'<','>',      16,17,18,19,20
85C5: 3E101112	
85C9: 1314    	
85CB: 08291716	    db     8, ')',23,  22, 21,        '"',';', 0, ']','['
85CF: 15223B00	
85D3: 5D5B    	
85D5: 1B3D2B2D	    db     27, '=','+','-','^',      ' ', 0, '.',',','*'
85D9: 5E20002E	
85DD: 2C2A    	
              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;    Name :     paging.asm
              	;    Author :  paul@robsons.org.uk
              	;    Date :     5th January 2018
              	;    Purpose :  Paging Manager
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
              	; ********************************************************************************************************
              	;
              	;                   Initialise Paging, set current to A
              	;
              	; ********************************************************************************************************
              	
85DF:         	PAGEInitialise:
85DF: E5      	    push   hl
85E0: ED9256  	    db     $ED,$92,$56              ; switch to page A
85E3: 3C      	    inc   a
85E4: ED9257  	    db     $ED,$92,$57
85E7: 3D      	    dec   a
85E8: 08      	    ex     af,af'                 ; put page in A'
85E9: 214D80  	    ld     hl,__PAGEStackBase           ; reset the page stack
85EC: 224B80  	    ld     (__PAGEStackPointer),hl
85EF: E1      	    pop   hl
85F0: C9      	    ret
              	
              	; ********************************************************************************************************
              	;
              	;                    Switch to a new page A
              	;
              	; ********************************************************************************************************
              	
85F1:         	SYS_Page_Switch:
85F1:         	PAGESwitch:
85F1: F5      	    push   af
85F2: E5      	    push   hl
              	
85F3: F5      	    push   af                   ; save A on stack
85F4: 2A4B80  	    ld     hl,(__PAGEStackPointer)       ; put A' on the stack, the current page
85F7: 08      	    ex     af,af'
85F8: 77      	    ld     (hl),a
85F9: 23      	    inc   hl
85FA: 224B80  	    ld     (__PAGEStackPointer),hl
              	
85FD: F1      	    pop   af                   ; restore new A
85FE: ED9256  	    db     $ED,$92,$56              ; switch to page A
8601: 3C      	    inc   a
8602: ED9257  	    db     $ED,$92,$57
8605: 3D      	    dec   a
8606: 08      	    ex     af,af'                 ; put page in A'
              	
8607: E1      	    pop   hl
8608: F1      	    pop   af
8609: C9      	    ret
              	
              	; ********************************************************************************************************
              	;
              	;                    Return to the previous page
              	;
              	; ********************************************************************************************************
              	
860A:         	SYS_Page_Restore:
860A:         	PAGERestore:
860A: F5      	    push   af
860B: E5      	    push   hl
860C: 2A4B80  	    ld     hl,(__PAGEStackPointer)       ; pop the old page off
860F: 2B      	    dec   hl
8610: 7E      	    ld     a,(hl)
8611: 224B80  	    ld     (__PAGEStackPointer),hl
8614: ED9256  	    db     $ED,$92,$56              ; switch to page A
8617: 3C      	    inc   a
8618: ED9257  	    db     $ED,$92,$57
861B: 3D      	    dec   a
861C: 08      	    ex     af,af'                 ; update A'
861D: E1      	    pop   hl
861E: F1      	    pop   af
861F: C9      	    ret
              	
              	; *********************************************************************************
              	; *********************************************************************************
              	;
              	;    File:    screen48k.asm
              	;    Purpose:  Hardware interface to Spectrum display, standard but with
              	;          sprites enabled.
              	;    Date :     5th January 2019
              	;    Author:    paul@robsons.org.uk
              	;
              	; *********************************************************************************
              	; *********************************************************************************
              	
              	; *********************************************************************************
              	;
              	;            Call the SetMode for the Spectrum 48k
              	;
              	; *********************************************************************************
              	
8620:         	GFXInitialise48k:
8620: F5      	    push   af                   ; save registers
8621: C5      	    push   bc
              	
8622: 013B12  	    ld     bc,$123B               ; Layer 2 access port
8625: 3E00    	    ld     a,0                 ; disable Layer 2
8627: ED79    	    out   (c),a
8629: ED911503	    db     $ED,$91,$15,$3            ; Disable LowRes but enable Sprites
              	
862D: 210040  	    ld     hl,$4000               ; clear pixel memory
8630: 3600    	__cs1:  ld     (hl),0
8632: 23      	    inc   hl
8633: 7C      	    ld     a,h
8634: FE58    	    cp     $58
8636: 20F8    	    jr     nz,__cs1
8638: 3647    	__cs2:  ld     (hl),$47              ; clear attribute memory
863A: 23      	    inc   hl
863B: 7C      	    ld     a,h
863C: FE5B    	    cp     $5B
863E: 20F8    	    jr     nz,__cs2
8640: AF      	    xor   a                   ; border off
8641: D3FE    	    out   ($FE),a
8643: C1      	    pop   bc
8644: F1      	    pop   af
8645: 212018  	    ld     hl,$1820               ; H = 24,L = 32, screen extent
8648: 114C86  	    ld     de,GFXPrintCharacter48k
864B: C9      	    ret
              	
              	; *********************************************************************************
              	;
              	;        Write a character E on the screen at HL, in colour D
              	;
              	; *********************************************************************************
              	
864C:         	GFXPrintCharacter48k:
864C: F5      	    push   af                   ; save registers
864D: C5      	    push   bc
864E: D5      	    push   de
864F: E5      	    push   hl
              	
8650: 43      	    ld     b,e                 ; character in B
8651: 7C      	    ld     a,h                 ; check range.
8652: FE03    	    cp     3
8654: 303D    	    jr     nc,__ZXWCExit
              	;
              	;    work out attribute position
              	;
8656: E5      	    push   hl                   ; save position.
8657: 7C      	    ld     a,h
8658: C658    	    add   $58
865A: 67      	    ld     h,a
              	
865B: 7A      	    ld     a,d                 ; get current colour
865C: E607    	    and   7                    ; mask 0..2
865E: F640    	    or     $40                  ; make bright
8660: 77      	    ld     (hl),a                 ; store it.
8661: E1      	    pop   hl
              	;
              	;    calculate screen position => HL
              	;
8662: D5      	    push   de
8663: EB      	    ex     de,hl
8664: 6B      	    ld     l,e                 ; Y5 Y4 Y3 X4 X3 X2 X1 X0
8665: 7A      	    ld     a,d
8666: E603    	    and   3
8668: 87      	    add   a,a
8669: 87      	    add   a,a
866A: 87      	    add   a,a
866B: F640    	    or     $40
866D: 67      	    ld     h,a
866E: D1      	    pop   de
              	;
              	;    char# 32-127 to font address => DE
              	;
866F: E5      	    push   hl
8670: 78      	    ld     a,b                 ; get character
8671: E67F    	    and   $7F                 ; bits 0-6 only.
8673: D620    	    sub   32
8675: 6F      	    ld     l,a                 ; put in HL
8676: 2600    	    ld     h,0
8678: 29      	    add   hl,hl                 ; x 8
8679: 29      	    add   hl,hl
867A: 29      	    add   hl,hl
867B: ED5B4780	    ld     de,(SIFontBase)           ; add the font base.
867F: 19      	    add   hl,de
8680: EB      	    ex     de,hl                 ; put in DE (font address)
8681: E1      	    pop   hl
              	;
              	;    copy font data to screen position.
              	;
8682: 78      	    ld     a,b
8683: 0608    	    ld     b,8                 ; copy 8 characters
8685: 0E00    	    ld     c,0                 ; XOR value 0
8687: CB7F    	    bit   7,a                 ; is the character reversed
8689: 2801    	    jr     z,__ZXWCCopy
868B: 0D      	    dec   c                   ; C is the XOR mask now $FF
868C:         	__ZXWCCopy:
868C: 1A      	    ld     a,(de)                ; get font data
868D: A9      	    xor   c                   ; xor with reverse
868E: 77      	    ld     (hl),a                 ; write back
868F: 24      	    inc   h                   ; bump pointers
8690: 13      	    inc   de
8691: 10F9    	    djnz   __ZXWCCopy               ; do B times.
8693:         	__ZXWCExit:
8693: E1      	    pop   hl                   ; restore and exit
8694: D1      	    pop   de
8695: C1      	    pop   bc
8696: F1      	    pop   af
8697: C9      	    ret
              	; *********************************************************************************
              	; *********************************************************************************
              	;
              	;    File:    screen_layer2.asm
              	;    Purpose:  Layer 2 console interface, sprites enabled, no shadow.
              	;    Date :     5th January 2019
              	;    Author:    paul@robsons.org.uk
              	;
              	; *********************************************************************************
              	; *********************************************************************************
              	
              	; *********************************************************************************
              	;
              	;                Clear Layer 2 Display.
              	;
              	; *********************************************************************************
              	
              	
8698:         	GFXInitialiseLayer2:
8698: F5      	    push   af
8699: C5      	    push   bc
869A: D5      	    push   de
869B: ED911503	    db     $ED,$91,$15,$3            ; Disable LowRes but enable Sprites
              	
869F: 1E02    	    ld     e,2                 ; 3 banks to erase
86A1:         	L2PClear:
86A1: 7B      	    ld     a,e                 ; put bank number in bits 6/7
86A2: CB0F    	    rrc   a
86A4: CB0F    	    rrc   a
86A6: F603    	    or     2+1                 ; shadow on, visible, enable write paging
86A8: 013B12  	    ld     bc,$123B               ; out to layer 2 port
86AB: ED79    	    out   (c),a
86AD: 210040  	    ld     hl,$4000               ; erase the bank to $00
86B0:         	L2PClearBank:                     ; assume default palette :)
86B0: 2B      	    dec   hl
86B1: 3600    	    ld     (hl),$00
86B3: 7C      	    ld     a,h
86B4: B5      	    or     l
86B5: 20F9    	    jr    nz,L2PClearBank
86B7: 1D      	    dec   e
86B8: F2A186  	    jp     p,L2PClear
              	
86BB: AF      	    xor   a
86BC: D3FE    	    out   ($FE),a
              	
86BE: D1      	    pop   de
86BF: C1      	    pop   bc
86C0: F1      	    pop   af
86C1: 212018  	    ld     hl,$1820               ; still 32 x 24
86C4: 11C886  	    ld     de,GFXPrintCharacterLayer2
86C7: C9      	    ret
              	;
              	;    Print Character E, colour D, position HL
              	;
86C8:         	GFXPrintCharacterLayer2:
86C8: F5      	    push   af
86C9: C5      	    push   bc
86CA: D5      	    push   de
86CB: E5      	    push   hl
86CC: DDE5    	    push   ix
              	
86CE: 43      	    ld     b,e                 ; save A temporarily
86CF: 78      	    ld     a,b
86D0: E67F    	    and   $7F
86D2: FE20    	    cp     32
86D4: 3872    	    jr     c,__L2Exit               ; check char in range
86D6: 7C      	    ld     a,h
86D7: FE03    	    cp     3
86D9: 306D    	    jr     nc,__L2Exit             ; check position in range
86DB: 78      	    ld     a,b
              	
86DC: F5      	    push   af
86DD: AF      	    xor   a                   ; convert colour in C to palette index
86DE: CB42    	    bit   0,d                 ; (assumes standard palette)
86E0: 2802    	    jr     z,__L2Not1
86E2: F603    	    or     $03
86E4:         	__L2Not1:
86E4: CB52    	    bit   2,d
86E6: 2802    	    jr     z,__L2Not2
86E8: F61C    	    or     $1C
86EA:         	__L2Not2:
86EA: CB4A    	    bit   1,d
86EC: 2802    	    jr     z,__L2Not3
86EE: F6C0    	    or     $C0
86F0:         	__L2Not3:
86F0: 4F      	    ld     c,a                 ; C is foreground
86F1: 0600    	    ld     b,0                  ; B is xor flipper, initially zero
86F3: F1      	    pop   af                   ; restore char
              	
86F4: E5      	    push   hl
86F5: CB7F    	    bit   7,a                 ; adjust background bit on bit 7
86F7: 2802    	    jr     z,__L2NotCursor
86F9: 06FF    	    ld     b,$FF                 ; light grey is cursor
86FB:         	__L2NotCursor:
86FB: E67F    	    and   $7F                 ; offset from space
86FD: D620    	    sub   $20
86FF: 6F      	    ld     l,a                 ; put into HL
8700: 2600    	    ld     h,0
8702: 29      	    add   hl,hl                 ; x 8
8703: 29      	    add   hl,hl
8704: 29      	    add   hl,hl
              	
8705: E5      	    push   hl                   ; transfer to IX
8706: DDE1    	    pop   ix
8708: E1      	    pop   hl
              	
8709: C5      	    push   bc                   ; add the font base to it.
870A: ED4B4780	    ld     bc,(SIFontBase)
870E: DD09    	    add   ix,bc
8710: C1      	    pop   bc
              	    ;
              	    ;    figure out the correct bank.
              	    ;
8711: C5      	    push   bc
8712: 7C      	    ld    a,h                 ; this is the page number.
8713: CB0F    	    rrc   a
8715: CB0F    	    rrc   a
8717: E6C0    	    and   $C0                 ; in bits 6 & 7
8719: F603    	    or     $03                 ; shadow on, visible, enable write pagin.
871B: 013B12  	    ld     bc,$123B               ; out to layer 2 port
871E: ED79    	    out   (c),a
8720: C1      	    pop   bc
              	    ;
              	    ;     now figure out position in bank
              	    ;
8721: EB      	    ex     de,hl
8722: 6B      	    ld     l,e
8723: 2600    	    ld     h,0
8725: 29      	    add   hl,hl
8726: 29      	    add   hl,hl
8727: 29      	    add   hl,hl
8728: CB24    	    sla   h
872A: CB24    	    sla   h
872C: CB24    	    sla   h
              	
872E: 1E08    	    ld     e,8                 ; do 8 rows
8730:         	__L2Outer:
8730: E5      	    push   hl                   ; save start
8731: 1608    	    ld     d,8                 ; do 8 columns
8733: DD7E00  	    ld     a,(ix+0)               ; get the bit pattern
8736: A8      	    xor   b                   ; maybe flip it ?
8737: DD23    	    inc   ix
8739:         	__L2Loop:
8739: 3600    	    ld     (hl),0                 ; background
873B: 87      	    add   a,a                 ; shift pattern left
873C: 3001    	    jr     nc,__L2NotSet
873E: 71      	    ld     (hl),c                 ; if MSB was set, overwrite with fgr
873F:         	__L2NotSet:
873F: 23      	    inc   hl
8740: 15      	    dec   d                   ; do a row
8741: 20F6    	    jr     nz,  __L2Loop
8743: E1      	    pop   hl                   ; restore, go 256 bytes down.
8744: 24      	    inc   h
8745: 1D      	    dec   e                   ; do 8 rows
8746: 20E8    	    jr     nz,__L2Outer
8748:         	__L2Exit:
8748: DDE1    	    pop   ix
874A: E1      	    pop   hl
874B: D1      	    pop   de
874C: C1      	    pop   bc
874D: F1      	    pop   af
874E: C9      	    ret
              	; *********************************************************************************
              	; *********************************************************************************
              	;
              	;    File:    screen_lores.asm
              	;    Purpose:  LowRes console interface, sprites enabled.
              	;    Date :     5th January 2019
              	;    Author:    paul@robsons.org.uk
              	;
              	; *********************************************************************************
              	; *********************************************************************************
              	
              	; *********************************************************************************
              	;
              	;                Clear LowRes Display.
              	;
              	; *********************************************************************************
              	
874F:         	GFXInitialiseLowRes:
874F: F5      	    push   af
8750: C5      	    push   bc
8751: D5      	    push   de
              	
8752: ED911583	    db     $ED,$91,$15,$83            ; Enable LowRes and enable Sprites
8756: AF      	    xor   a                   ; layer 2 off.
8757: 013B12  	    ld     bc,$123B               ; out to layer 2 port
875A: ED79    	    out   (c),a
              	
875C: 210040  	    ld     hl,$4000               ; erase the bank to $00
875F: 110060  	    ld     de,$6000
8762:         	LowClearScreen:                   ; assume default palette :)
8762: AF      	    xor   a
8763: 77      	    ld     (hl),a
8764: 12      	    ld     (de),a
8765: 23      	    inc   hl
8766: 13      	    inc   de
8767: 7C      	    ld     a,h
8768: FE58    	    cp     $58
876A: 20F6    	    jr    nz,LowClearScreen
876C: AF      	    xor   a
876D: D3FE    	    out   ($FE),a
876F: D1      	    pop   de
8770: C1      	    pop   bc
8771: F1      	    pop   af
8772: 21100C  	    ld     hl,$0C10               ; resolution is 16x12 chars
8775: 117987  	    ld     de,GFXPrintCharacterLowRes
8778: C9      	    ret
              	;
              	;    Print Character E Colour D @ HL
              	;
8779:         	GFXPrintCharacterLowRes:
8779: F5      	    push   af
877A: C5      	    push   bc
877B: D5      	    push   de
877C: E5      	    push   hl
877D: DDE5    	    push   ix
              	
877F: 43      	    ld     b,e                 ; save character in B
8780: 7B      	    ld     a,e
8781: E67F    	    and   $7F
8783: FE20    	    cp     32
8785: 3866    	    jr     c,__LPExit
              	
8787: 29      	    add   hl,hl
8788: 29      	    add   hl,hl
8789: 7C      	    ld     a,h                 ; check in range 192*4 = 768
878A: FE03    	    cp     3
878C: 305F    	    jr     nc,__LPExit
              	
878E: 7A      	    ld     a,d                 ; only lower 3 bits of colour
878F: E607    	    and   7
8791: 4F      	    ld     c,a                 ; C is foreground
              	
8792: E5      	    push   hl
8793: 78      	    ld     a,b                 ; get char back
8794: 0600    	    ld     b,0                 ; B = no flip colour.
8796: CB7F    	    bit   7,a
8798: 2801    	    jr     z,__LowNotReverse           ; but 7 set, flip is $FF
879A: 05      	    dec   b
879B:         	__LowNotReverse:
879B: E67F    	    and   $7F                 ; offset from space
879D: D620    	    sub   $20
879F: 6F      	    ld     l,a                 ; put into HL
87A0: 2600    	    ld     h,0
87A2: 29      	    add   hl,hl                 ; x 8
87A3: 29      	    add   hl,hl
87A4: 29      	    add   hl,hl
              	
87A5: E5      	    push   hl                   ; transfer to IX
87A6: DDE1    	    pop   ix
              	
87A8: C5      	    push   bc                   ; add the font base to it.
87A9: ED4B4780	    ld     bc,(SIFontBase)
87AD: DD09    	    add   ix,bc
87AF: C1      	    pop   bc
87B0: E1      	    pop   hl
87B1: EB      	    ex     de,hl
87B2: 7B      	    ld     a,e                 ; put DE => HL
87B3: E6C0    	    and   192                 ; these are part of Y
87B5: 6F      	    ld     l,a                  ; Y multiplied by 4 then 32 = 128
87B6: 62      	    ld     h,d
87B7: 29      	    add   hl,hl
87B8: 29      	    add   hl,hl
87B9: 29      	    add   hl,hl
87BA: 29      	    add   hl,hl
87BB: CBF4    	    set   6,h                 ; put into $4000 range
              	
87BD: 3E3C    	    ld     a,15*4                 ; mask for X, which has been premultiplied.
87BF: A3      	    and   e                   ; and with E, gives X position
87C0: 87      	    add   a,a                 ; now multiplied by 8.
87C1: 5F      	    ld     e,a                 ; DE is x offset.
87C2: 1600    	    ld     d,0
              	
87C4: 19      	    add   hl,de
87C5: 7C      	    ld     a,h
87C6: FE58    	    cp     $58                 ; need to be shifted to 2nd chunk ?
87C8: 3804    	    jr     c,__LowNotLower2
87CA: 110008  	    ld     de,$0800
87CD: 19      	    add   hl,de
87CE:         	__LowNotLower2:
87CE: 1E08    	    ld     e,8                 ; do 8 rows
87D0:         	__LowOuter:
87D0: E5      	    push   hl                   ; save start
87D1: 1608    	    ld     d,8                 ; do 8 columns
87D3: DD7E00  	    ld     a,(ix+0)               ; get the bit pattern
87D6: A8      	    xor   b
87D7: DD23    	    inc   ix
87D9:         	__LowLoop:
87D9: 3600    	    ld     (hl),0                 ; background
87DB: 87      	    add   a,a                 ; shift pattern left
87DC: 3001    	    jr     nc,__LowNotSet
87DE: 71      	    ld     (hl),c                 ; if MSB was set, overwrite with fgr
87DF:         	__LowNotSet:
87DF: 2C      	    inc   l
87E0: 15      	    dec   d                   ; do a row
87E1: 20F6    	    jr     nz,  __LowLoop
87E3: E1      	    pop   hl                   ; restore, go 256 bytes down.
87E4: D5      	    push   de
87E5: 118000  	    ld     de,128
87E8: 19      	    add   hl,de
87E9: D1      	    pop   de
87EA: 1D      	    dec   e                   ; do 8 rows
87EB: 20E3    	    jr     nz,__LowOuter
87ED:         	__LPExit:
87ED: DDE1    	    pop   ix
87EF: E1      	    pop   hl
87F0: D1      	    pop   de
87F1: C1      	    pop   bc
87F2: F1      	    pop   af
87F3: C9      	    ret
              	
87F4:         	FreeMemory:
87F4: FFFFFFFF		org $C000
87F8: FF...   	
C000: 0622    		db    6,$22
C002: 4981    		dw    define_21
C004: 8121    		db    129,"!"
              	
C006: 0822    		db    8,$22
C008: 6F80    		dw    define_21_61_2b
C00A: 8321612B		db    131,"!a+"
              	
C00E: 0722    		db    7,$22
C010: 7880    		dw    define_21_61
C012: 822161  		db    130,"!a"
              	
C015: 0622    		db    6,$22
C017: 9780    		dw    define_2a
C019: 012A    		db    1,"*"
              	
C01B: 0622    		db    6,$22
C01D: C880    		dw    define_2b
C01F: 812B    		db    129,"+"
              	
C021: 0822    		db    8,$22
C023: B280    		dw    define_2d_6f_72
C025: 032D6F72		db    3,"-or"
              	
C029: 0722    		db    7,$22
C02B: 8880    		dw    define_32_2a
C02D: 82322A  		db    130,"2*"
              	
C030: 0722    		db    7,$22
C032: 8F80    		dw    define_32_2f
C034: 82322F  		db    130,"2/"
              	
C037: 0622    		db    6,$22
C039: 4081    		dw    define_40
C03B: 8140    		db    129,"@"
              	
C03D: 0822    		db    8,$22
C03F: 5D80    		dw    define_40_61_2b
C041: 8340612B		db    131,"@a+"
              	
C045: 0722    		db    7,$22
C047: 6680    		dw    define_40_61
C049: 824061  		db    130,"@a"
              	
C04C: 0722    		db    7,$22
C04E: E580    		dw    define_41_21
C050: 826121  		db    130,"a!"
              	
C053: 0722    		db    7,$22
C055: D080    		dw    define_41_40
C057: 826140  		db    130,"a@"
              	
C05A: 0822    		db    8,$22
C05C: BD80    		dw    define_61_6e_64
C05E: 03616E64		db    3,"and"
              	
C062: 0722    		db    7,$22
C064: 1681    		dw    define_62_21
C066: 826221  		db    130,"b!"
              	
C069: 0922    		db    9,$22
C06B: 0181    		dw    define_62_21_61_2b
C06D: 84622161		db    132,"b!a+"
C071: 2B      	
              	
C072: 0822    		db    8,$22
C074: 0881    		dw    define_62_21_61
C076: 83622161		db    131,"b!a"
              	
C07A: 0722    		db    7,$22
C07C: 0E81    		dw    define_62_40
C07E: 826240  		db    130,"b@"
              	
C081: 0922    		db    9,$22
C083: F080    		dw    define_62_40_61_2b
C085: 84624061		db    132,"b@a+"
C089: 2B      	
              	
C08A: 0822    		db    8,$22
C08C: F980    		dw    define_62_40_61
C08E: 83624061		db    131,"b@a"
              	
C092: 0822    		db    8,$22
C094: 8180    		dw    define_63_6f_6d
C096: 03636F6D		db    3,"com"
              	
C09A: 0922    		db    9,$22
C09C: EB80    		dw    define_64_72_6f_70
C09E: 8464726F		db    132,"drop"
C0A2: 70      	
              	
C0A3: 0822    		db    8,$22
C0A5: D780    		dw    define_64_75_70
C0A7: 83647570		db    131,"dup"
              	
C0AB: 1422    		db    20,$22
C0AD: 2381    		dw    define_67_66_78_2e_72_61_77_2e_73_65_74_6d_6f_64_65
C0AF: 0F676678		db    15,"gfx.raw.setmode"
C0B3: 2E726177	
C0B7: 2E736574	
C0BB: 6D6F6465	
              	
C0BF: 1222    		db    18,$22
C0C1: 2C81    		dw    define_67_66_78_2e_72_61_77_2e_77_72_69_74_65
C0C3: 0D676678		db    13,"gfx.raw.write"
C0C7: 2E726177	
C0CB: 2E777269	
C0CF: 7465    	
              	
C0D1: 1522    		db    21,$22
C0D3: 3681    		dw    define_67_66_78_2e_72_61_77_2e_77_72_69_74_65_68_65_78
C0D5: 10676678		db    16,"gfx.raw.writehex"
C0D9: 2E726177	
C0DD: 2E777269	
C0E1: 74656865	
C0E5: 78      	
              	
C0E6: 0822    		db    8,$22
C0E8: 1E81    		dw    define_6e_69_70
C0EA: 836E6970		db    131,"nip"
              	
C0EE: 0722    		db    7,$22
C0F0: 5381    		dw    define_6f_72
C0F2: 026F72  		db    2,"or"
              	
C0F5: 0922    		db    9,$22
C0F7: DC80    		dw    define_6f_76_65_72
C0F9: 846F7665		db    132,"over"
C0FD: 72      	
              	
C0FE: 0922    		db    9,$22
C100: 5E81    		dw    define_73_77_61_70
C102: 84737761		db    132,"swap"
C106: 70      	
              	
C107: 00      		db  0


; +++ segments +++

#CODE          = $8000 = 32768,  size = $4108 = 16648

; +++ global symbols +++

AlternateFont       = $8165 = 33125          kernel.asm:574
Boot                = $8006 = 32774          kernel.asm:24
BootAddress         = $8033 = 32819          kernel.asm:67
BootPage            = $8035 = 32821          kernel.asm:69
DictionaryPage      = $0020 =    32          kernel.asm:12 (unused)
DisplayInfo         = $802F = 32815          kernel.asm:65 (unused)
DisplayInformation  = $803B = 32827          kernel.asm:80
FARCompileByte      = $8465 = 33893          kernel.asm:594
FARCompileWord      = $847D = 33917          kernel.asm:616 (unused)
FARMacroExpander    = $8498 = 33944          kernel.asm:641
FirstCodePage       = $0022 =    34          kernel.asm:13
FreeMemory          = $87F4 = 34804          kernel.asm:1400
GFXInitialise48k    = $8620 = 34336          kernel.asm:979
GFXInitialiseLayer2 = $8698 = 34456          kernel.asm:1106
GFXInitialiseLowRes = $874F = 34639          kernel.asm:1267
GFXPrintCharacter48k = $864C = 34380          kernel.asm:1013
GFXPrintCharacterLayer2 = $86C8 = 34504          kernel.asm:1142
GFXPrintCharacterLowRes = $8779 = 34681          kernel.asm:1299
GFXWriteHexWordA    = $84E2 = 34018          kernel.asm:733 (unused)
Here                = $8027 = 32807          kernel.asm:59
HerePage            = $8029 = 32809          kernel.asm:61
IOScanKeyboard      = $8512 = 34066          kernel.asm:787 (unused)
L2PClear            = $86A1 = 34465          kernel.asm:1113
L2PClearBank        = $86B0 = 34480          kernel.asm:1121
LowClearScreen      = $8762 = 34658          kernel.asm:1279
NextFreePage        = $802B = 32811          kernel.asm:63 (unused)
PAGEInitialise      = $85DF = 34271          kernel.asm:897
PAGERestore         = $860A = 34314          kernel.asm:945
PAGESwitch          = $85F1 = 34289          kernel.asm:916
SIFontBase          = $8047 = 32839          kernel.asm:88
SIScreenDriver      = $8049 = 32841          kernel.asm:90
SIScreenHeight      = $803F = 32831          kernel.asm:84
SIScreenMode        = $8043 = 32835          kernel.asm:86
SIScreenWidth       = $803B = 32827          kernel.asm:82
SYS_GFX_SetMode     = $84A3 = 33955          kernel.asm:668
SYS_GFX_Write       = $84CD = 33997          kernel.asm:708
SYS_GFX_WriteHex    = $84E0 = 34016          kernel.asm:731
SYS_Page_Restore    = $860A = 34314          kernel.asm:944 (unused)
SYS_Page_Switch     = $85F1 = 34289          kernel.asm:915 (unused)
StackDefault        = $8037 = 32823          kernel.asm:71
StackTop            = $7EFC = 32508          kernel.asm:17
StopDefault         = $8024 = 32804          kernel.asm:37
SystemInformation   = $8027 = 32807          kernel.asm:57
__GFXConfigure      = $84BD = 33981          kernel.asm:689
__GFXLayer2         = $84B5 = 33973          kernel.asm:682
__GFXLowRes         = $84BA = 33978          kernel.asm:686
__GFXWCExit         = $84DB = 34011          kernel.asm:718
__GFXWHByte         = $84F4 = 34036          kernel.asm:749
__GFXWHDigit        = $850A = 34058          kernel.asm:763
__GFXWHNibble       = $8501 = 34049          kernel.asm:757
__L2Exit            = $8748 = 34632          kernel.asm:1243
__L2Loop            = $8739 = 34617          kernel.asm:1230
__L2Not1            = $86E4 = 34532          kernel.asm:1164
__L2Not2            = $86EA = 34538          kernel.asm:1168
__L2Not3            = $86F0 = 34544          kernel.asm:1172
__L2NotCursor       = $86FB = 34555          kernel.asm:1181
__L2NotSet          = $873F = 34623          kernel.asm:1235
__L2Outer           = $8730 = 34608          kernel.asm:1224
__LPExit            = $87ED = 34797          kernel.asm:1392
__LowLoop           = $87D9 = 34777          kernel.asm:1376
__LowNotLower2      = $87CE = 34766          kernel.asm:1368
__LowNotReverse     = $879B = 34715          kernel.asm:1328
__LowNotSet         = $87DF = 34783          kernel.asm:1381
__LowOuter          = $87D0 = 34768          kernel.asm:1370
__MacroCopy         = $849A = 33946          kernel.asm:644
__PAGEStackBase     = $804D = 32845          kernel.asm:101
__PAGEStackPointer  = $804B = 32843          kernel.asm:99
__ZXWCCopy          = $868C = 34444          kernel.asm:1075
__ZXWCExit          = $8693 = 34451          kernel.asm:1082
___kr4              = $8543 = 34115          kernel.asm:818
__cs1               = $8630 = 34352          kernel.asm:989
__cs2               = $8638 = 34360          kernel.asm:994
__kr1               = $8527 = 34087          kernel.asm:801
__kr2               = $8532 = 34098          kernel.asm:807
__kr3               = $8534 = 34100          kernel.asm:810
__kr_exit           = $8563 = 34147          kernel.asm:848
__kr_keypressed     = $855D = 34141          kernel.asm:842
__kr_no_shift_table = $8567 = 34151          kernel.asm:863
__kr_shift_table    = $858F = 34191          kernel.asm:869
__kr_symbol_shift_table = $85B7 = 34231          kernel.asm:875
__multiply_loop     = $809E = 32926          kernel.asm:236
__multiply_noadd    = $80A3 = 32931          kernel.asm:240
_end                = $C108 = 49416          kernel.asm:18 (unused)
_size               = $4108 = 16648          kernel.asm:18 (unused)
define_21           = $8149 = 33097          kernel.asm:534
define_21_61        = $8078 = 32888          kernel.asm:178
define_21_61_2b     = $806F = 32879          kernel.asm:163
define_2a           = $8097 = 32919          kernel.asm:231
define_2b           = $80C8 = 32968          kernel.asm:287
define_2d_6f_72     = $80B2 = 32946          kernel.asm:257
define_32_2a        = $8088 = 32904          kernel.asm:206
define_32_2f        = $808F = 32911          kernel.asm:219
define_40           = $8140 = 33088          kernel.asm:519
define_40_61        = $8066 = 32870          kernel.asm:148
define_40_61_2b     = $805D = 32861          kernel.asm:133
define_41_21        = $80E5 = 32997          kernel.asm:340
define_41_40        = $80D0 = 32976          kernel.asm:301
define_61_6e_64     = $80BD = 32957          kernel.asm:272
define_62_21        = $8116 = 33046          kernel.asm:439
define_62_21_61     = $8108 = 33032          kernel.asm:414
define_62_21_61_2b  = $8101 = 33025          kernel.asm:401
define_62_40        = $810E = 33038          kernel.asm:426
define_62_40_61     = $80F9 = 33017          kernel.asm:388
define_62_40_61_2b  = $80F0 = 33008          kernel.asm:374
define_63_6f_6d     = $8081 = 32897          kernel.asm:193
define_64_72_6f_70  = $80EB = 33003          kernel.asm:352
define_64_75_70     = $80D7 = 32983          kernel.asm:314
define_67_66_78_2e_72_61_77_2e_73_65_74_6d_6f_64_65 = $8123 = 33059          kernel.asm:474
define_67_66_78_2e_72_61_77_2e_77_72_69_74_65 = $812C = 33068          kernel.asm:485
define_67_66_78_2e_72_61_77_2e_77_72_69_74_65_68_65_78 = $8136 = 33078          kernel.asm:497
define_6e_69_70     = $811E = 33054          kernel.asm:453
define_6f_72        = $8153 = 33107          kernel.asm:550
define_6f_76_65_72  = $80DC = 32988          kernel.asm:325
define_73_77_61_70  = $815E = 33118          kernel.asm:565
end_21              = $8153 = 33107          kernel.asm:544
end_21_61           = $8081 = 32897          kernel.asm:187
end_21_61_2b        = $8078 = 32888          kernel.asm:172
end_2b              = $80D0 = 32976          kernel.asm:295
end_32_2a           = $808F = 32911          kernel.asm:213
end_32_2f           = $8097 = 32919          kernel.asm:225
end_40              = $8149 = 33097          kernel.asm:528
end_40_61           = $806F = 32879          kernel.asm:157
end_40_61_2b        = $8066 = 32870          kernel.asm:142
end_41_21           = $80EB = 33003          kernel.asm:346
end_41_40           = $80D7 = 32983          kernel.asm:308
end_62_21           = $811E = 33054          kernel.asm:447
end_62_21_61        = $810E = 33038          kernel.asm:420
end_62_21_61_2b     = $8108 = 33032          kernel.asm:408
end_62_40           = $8116 = 33046          kernel.asm:433
end_62_40_61        = $8101 = 33025          kernel.asm:395
end_62_40_61_2b     = $80F9 = 33017          kernel.asm:382
end_64_72_6f_70     = $80F0 = 33008          kernel.asm:357
end_64_75_70        = $80DC = 32988          kernel.asm:319
end_6e_69_70        = $8123 = 33059          kernel.asm:458
end_6f_76_65_72     = $80E5 = 32997          kernel.asm:334
end_73_77_61_70     = $8165 = 33125          kernel.asm:572
start_21            = $814D = 33101          kernel.asm:537
start_21_61         = $807C = 32892          kernel.asm:181
start_21_61_2b      = $8073 = 32883          kernel.asm:166
start_2b            = $80CC = 32972          kernel.asm:290
start_32_2a         = $808C = 32908          kernel.asm:209
start_32_2f         = $8093 = 32915          kernel.asm:222
start_40            = $8144 = 33092          kernel.asm:522
start_40_61         = $806A = 32874          kernel.asm:151
start_40_61_2b      = $8061 = 32865          kernel.asm:136
start_41_21         = $80E9 = 33001          kernel.asm:343
start_41_40         = $80D4 = 32980          kernel.asm:304
start_62_21         = $811A = 33050          kernel.asm:442
start_62_21_61      = $810C = 33036          kernel.asm:417
start_62_21_61_2b   = $8105 = 33029          kernel.asm:404
start_62_40         = $8112 = 33042          kernel.asm:429
start_62_40_61      = $80FD = 33021          kernel.asm:391
start_62_40_61_2b   = $80F4 = 33012          kernel.asm:377
start_64_72_6f_70   = $80EF = 33007          kernel.asm:355
start_64_75_70      = $80DB = 32987          kernel.asm:317
start_6e_69_70      = $8122 = 33058          kernel.asm:456
start_6f_76_65_72   = $80E0 = 32992          kernel.asm:328
start_73_77_61_70   = $8162 = 33122          kernel.asm:568


total time: 0.0058 sec.
no errors
