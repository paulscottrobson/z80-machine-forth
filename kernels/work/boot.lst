              	; --------------------------------------
              	; zasm: assemble "kernel.asm"
              	; date: 2019-01-14 08:34:11
              	; --------------------------------------


              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;    Name :     kernel.asm
              	;    Author :  Paul Robson (paul@robsons.org.uk)
              	;    Date :     13th January 2019
              	;    Purpose :  Machine Forth Kernel
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
0020:         	DictionaryPage = $20                 ; dictionary page
0022:         	FirstCodePage = $22                 ; first code page.
              	;
              	;    Memory allocated from the Unused space in $4000-$7FFF
              	;
7EFC:         	StackTop = $7EFC                   ;      -$7EFC Top of stack
              	
8000:         	    org   $8000                 ; $8000 boot.
8000: 1804    	    jr     Boot
8002: FFFF    	    org   $8004                 ; $8004 address of sysinfo
8004: 2780    	    dw     SystemInformation
              	
8006: ED7B3780	Boot:  ld     sp,(StackDefault)          ; reset Z80 Stack
800A: DD01    	    db     $DD,$01
800C: F3      	    di                      ; disable interrupts
800D: ED910702	    db     $ED,$91,7,2              ; set turbo port (7) to 2 (14Mhz speed)
8011: 3E01    	    ld     a,1                 ; blue border
8013: D3FE    	    out   ($FE),a
8015: 3E22    	    ld     a,FirstCodePage           ; get the page to start
8017: CDF485  	    call   PAGEInitialise
801A: 3A3580  	    ld     a,(BootPage)            ; switch to boot page.
801D: CDF485  	    call   PAGEInitialise
8020: 2A3380  	    ld     hl,(BootAddress)          ; start address
8023: E9      	    jp     (hl)
              	
8024:         	StopDefault:
8024: C32480  	    jp     StopDefault
              	
              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;    Name :     data.asm
              	;    Author :  Paul Robson (paul@robsons.org.uk)
              	;    Date :     13th January 2019
              	;    Purpose :  Data area
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
              	; ***************************************************************************************
              	;
              	;                System Information
              	;
              	; ***************************************************************************************
              	
8027:         	SystemInformation:
              	
8027:         	Here:                        ; +0   Here
8027: 0988    	    dw     FreeMemory
8029:         	HerePage:                       ; +2  Here.Page
8029: 2200    	    db     FirstCodePage,0
802B:         	NextFreePage:                     ; +4   Next available code page (2 8k pages/page)
802B: 24000000	    db     FirstCodePage+2,0,0,0
802F:         	DisplayInfo:                     ; +8   Display information
802F: 3B800000	    dw     DisplayInformation,0
8033:         	BootAddress:                    ; +12   Boot Address
8033: 2480    	    dw     StopDefault
8035:         	BootPage:                      ; +14   Boot Page
8035: 2200    	    db     FirstCodePage,0
8037:         	StackDefault:                     ; +16   Initial value of stack.
8037: FC7E0000	    dw     StackTop,0
              	
              	; ***************************************************************************************
              	;
              	;               Display system information
              	;
              	; ***************************************************************************************
              	
803B:         	DisplayInformation:
              	
803B:         	SIScreenWidth:                     ; +0   screen width
803B: 00000000	    db     0,0,0,0
803F:         	SIScreenHeight:                    ; +4   screen height
803F: 00000000	    db     0,0,0,0
8043:         	SIScreenMode:                    ; +8   current mode
8043: 00000000	    db     0,0,0,0
8047:         	SIFontBase:                      ; +12   font in use
8047: 7B81    	    dw     AlternateFont
8049:         	SIScreenDriver:                    ; +16   Screen Driver
8049: 0000    	    dw     0
              	
              	; ***************************************************************************************
              	;
              	;                 Other data and buffers
              	;
              	; ***************************************************************************************
              	
804B:         	__PAGEStackPointer:                 ; stack used for switching pages
804B: 0000    	    dw     0
804D:         	__PAGEStackBase:
804D: FFFFFFFF	    ds     16
8051: FF...   	
              	
              	
              	; *********************************************************************************************
              	; *********************************************************************************************
              	;
              	;    Name :     core.asm
              	;    Date :    13th January 2019
              	;    Author :   Paul Robson (paul@robsons.org.uk)
              	;    Purpose :  Core words for the Machine Forth system
              	;
              	; *********************************************************************************************
              	; *********************************************************************************************
              	;
              	;    Notes :   TOS cached in DE
              	;          A is HL
              	;          No real return stack.
              	;          * implemented directly.
              	;
              	;    Missing :  ;       handled by compiler
              	;          pop/push   short term working stack, seperate.
              	;          @R+,!R+    make no sense because of single stack.
              	;
              	;    To Add :   b versions of !a !a+ @a @a+ @ ! , port access functions.
              	;
              	; *********************************************************************************************
              	
              	; *********************************************************************************************
              	;                   @a+ read A and increment
              	; *********************************************************************************************
              	
805D:         	define_40_61_2b:
805D: 0605    		ld   b,end_40_61_2b-start_40_61_2b
805F: CDAE84  		call FARMacroExpander
8062:         	start_40_61_2b:
8062: D5      	    push   de                   ; save current TOS
8063: 5E      	    ld     e,(hl)                 ; read new TOS
8064: 23      	    inc   hl
8065: 56      	    ld     d,(hl)
8066: 23      	    inc   hl
8067:         	end_40_61_2b:
              	
              	; *********************************************************************************************
              	;                       @a read A
              	; *********************************************************************************************
              	
8067:         	define_40_61:
8067: 0605    		ld   b,end_40_61-start_40_61
8069: CDAE84  		call FARMacroExpander
806C:         	start_40_61:
806C: D5      	    push   de                   ; save current TOS
806D: 5E      	    ld     e,(hl)                ; read new TOS
806E: 23      	    inc   hl
806F: 56      	    ld     d,(hl)
8070: 2B      	    dec   hl
8071:         	end_40_61:
              	
              	; *********************************************************************************************
              	;                !a+ write TOS to A and increment
              	; *********************************************************************************************
              	
8071:         	define_21_61_2b:
8071: 0605    		ld   b,end_21_61_2b-start_21_61_2b
8073: CDAE84  		call FARMacroExpander
8076:         	start_21_61_2b:
8076: 73      	    ld     (hl),e                 ; write out
8077: 23      	    inc   hl
8078: 72      	    ld     (hl),d
8079: 23      	    inc   hl
807A: D1      	    pop   de                   ; update TOS
807B:         	end_21_61_2b:
              	
              	; *********************************************************************************************
              	;                    !a write TOS to A
              	; *********************************************************************************************
              	
807B:         	define_21_61:
807B: 0605    		ld   b,end_21_61-start_21_61
807D: CDAE84  		call FARMacroExpander
8080:         	start_21_61:
8080: 73      	    ld     (hl),e                 ; write out
8081: 23      	    inc   hl
8082: 72      	    ld     (hl),d
8083: 2B      	    dec    hl
8084: D1      	    pop   de                   ; update TOS
8085:         	end_21_61:
              	
              	; *********************************************************************************************
              	;                    com one's complement
              	; *********************************************************************************************
              	
8085:         	define_63_6f_6d:
8085: 7A      	    ld     a,d
8086: 2F      	    cpl
8087: 57      	    ld     d,a
8088: 7B      	    ld     a,e
8089: 2F      	    cpl
808A: 5F      	    ld     e,a
808B: C9      		ret
              	
              	; *********************************************************************************************
              	;                    2* double TOS
              	; *********************************************************************************************
              	
808C:         	define_32_2a:
808C: 0603    		ld   b,end_32_2a-start_32_2a
808E: CDAE84  		call FARMacroExpander
8091:         	start_32_2a:
8091: EB      	    ex     de,hl
8092: 29      	    add   hl,hl
8093: EB      	    ex     de,hl
8094:         	end_32_2a:
              	
              	; *********************************************************************************************
              	;                   2/ halve TOS unsigned
              	; *********************************************************************************************
              	
8094:         	define_32_2f:
8094: 0604    		ld   b,end_32_2f-start_32_2f
8096: CDAE84  		call FARMacroExpander
8099:         	start_32_2f:
8099: CB3A    	    srl   d
809B: CB1B    	    rr     e
809D:         	end_32_2f:
              	
              	; *********************************************************************************************
              	;                     * multiplier
              	; *********************************************************************************************
              	
809D:         	define_2a:
809D: DDE1    		pop ix
809F: C1      	    pop   bc               ; multiplicand.
80A0: E5      	    push   hl               ; save A
80A1: 210000  	    ld     hl,$0000           ; result.
80A4:         	__multiply_loop:
80A4: CB41    	    bit   0,c             ; check bit 0.
80A6: 2801    	    jr     z,__multiply_noadd       ; don't add if 0
80A8: 19      	    add   hl,de             ; add to total
80A9:         	__multiply_noadd:
80A9: EB      	    ex     de,hl             ; shift DE left
80AA: 29      	    add   hl,hl
80AB: EB      	    ex     de,hl             ; shift BC right
80AC: CB38    	    srl   b
80AE: CB19    	    rr     c
80B0: 78      	    ld     a,b             ; go back if not done
80B1: B1      	    or     c
80B2: 20F0    	    jr     nz,__multiply_loop
80B4: EB      	    ex     de,hl             ; result in DE (top of stack)
80B5: E1      	    pop   hl               ; restore A
80B6: DDE9    		jp (ix)
              	
              	; *********************************************************************************************
              	;                     -or exclusive OR
              	; *********************************************************************************************
              	
80B8:         	define_2d_6f_72:
80B8: DDE1    		pop ix
80BA: C1      	    pop   bc
80BB: 7A      	    ld     a,d
80BC: A8      	    xor   b
80BD: 57      	    ld     d,a
80BE: 7B      	    ld     a,e
80BF: A9      	    xor   c
80C0: 5F      	    ld     e,a
80C1: DDE9    		jp (ix)
              	
              	; *********************************************************************************************
              	;                     and logical AND
              	; *********************************************************************************************
              	
80C3:         	define_61_6e_64:
80C3: DDE1    		pop ix
80C5: C1      	    pop   bc
80C6: 7A      	    ld     a,d
80C7: A0      	    and   b
80C8: 57      	    ld     d,a
80C9: 7B      	    ld     a,e
80CA: A1      	    and   c
80CB: 5F      	    ld     e,a
80CC: DDE9    		jp (ix)
              	
              	; *********************************************************************************************
              	;                     + add
              	; *********************************************************************************************
              	
80CE:         	define_2b:
80CE: 0604    		ld   b,end_2b-start_2b
80D0: CDAE84  		call FARMacroExpander
80D3:         	start_2b:
80D3: EB      	    ex     de,hl
80D4: C1      	    pop   bc
80D5: 09      	    add   hl,bc
80D6: EB      	    ex     de,hl
80D7:         	end_2b:
              	
              	; *********************************************************************************************
              	;                     A@ copy A to stack
              	; *********************************************************************************************
              	
80D7:         	define_41_40:
80D7: 0603    		ld   b,end_41_40-start_41_40
80D9: CDAE84  		call FARMacroExpander
80DC:         	start_41_40:
80DC: D5      	    push   de                   ; save old TOS
80DD: 5D      	    ld     e,l                 ; copy A into TOS
80DE: 54      	    ld     d,h
80DF:         	end_41_40:
              	
              	; *********************************************************************************************
              	;                    dup Duplicate TOS
              	; *********************************************************************************************
              	
80DF:         	define_64_75_70:
80DF: 0601    		ld   b,end_64_75_70-start_64_75_70
80E1: CDAE84  		call FARMacroExpander
80E4:         	start_64_75_70:
80E4: D5      	    push   de
80E5:         	end_64_75_70:
              	
              	; *********************************************************************************************
              	;                    over, 2nd copied to TOS.
              	; *********************************************************************************************
              	
80E5:         	define_6f_76_65_72:
80E5: 0605    		ld   b,end_6f_76_65_72-start_6f_76_65_72
80E7: CDAE84  		call FARMacroExpander
80EA:         	start_6f_76_65_72:
80EA: C1      	    pop   bc                   ; 2nd on stack
80EB: C5      	    push   bc                   ; put back
80EC: D5      	    push   de                   ; save TOS
80ED: 58      	    ld     e,b                 ; copy 2nd value into DE
80EE: 51      	    ld     d,c
80EF:         	end_6f_76_65_72:
              	
              	; *********************************************************************************************
              	;                    A! copy stack to A
              	; *********************************************************************************************
              	
80EF:         	define_41_21:
80EF: 0602    		ld   b,end_41_21-start_41_21
80F1: CDAE84  		call FARMacroExpander
80F4:         	start_41_21:
80F4: EB      	    ex     de,hl                 ; TOS in HL
80F5: D1      	    pop   de                   ; update TOS
80F6:         	end_41_21:
              	
              	; *********************************************************************************************
              	;                    drop Drop TOS
              	; *********************************************************************************************
              	
80F6:         	define_64_72_6f_70:
80F6: 0601    		ld   b,end_64_72_6f_70-start_64_72_6f_70
80F8: CDAE84  		call FARMacroExpander
80FB:         	start_64_72_6f_70:
80FB: D1      	    pop   de
80FC:         	end_64_72_6f_70:
              	
              	; *********************************************************************************************
              	; *********************************************************************************************
              	;
              	;    Name :     extensions.asm
              	;    Date :    13th January 2019
              	;    Author :   Paul Robson (paul@robsons.org.uk)
              	;    Purpose :  Core extensions
              	;
              	; *********************************************************************************************
              	; *********************************************************************************************
              	
              	; *********************************************************************************************
              	;                   b@a+ read byte A and increment
              	; *********************************************************************************************
              	
80FC:         	define_62_40_61_2b:
80FC: 0605    		ld   b,end_62_40_61_2b-start_62_40_61_2b
80FE: CDAE84  		call FARMacroExpander
8101:         	start_62_40_61_2b:
8101: D5      	    push   de                   ; save current TOS
8102: 5E      	    ld     e,(hl)                 ; read new TOS
8103: 23      	    inc   hl
8104: 1600    	    ld     d,$00
8106:         	end_62_40_61_2b:
              	
              	; *********************************************************************************************
              	;                       b@a byte read A
              	; *********************************************************************************************
              	
8106:         	define_62_40_61:
8106: 0604    		ld   b,end_62_40_61-start_62_40_61
8108: CDAE84  		call FARMacroExpander
810B:         	start_62_40_61:
810B: D5      	    push   de                   ; save current TOS
810C: 5E      	    ld     e,(hl)                ; read new TOS
810D: 1600    	    ld     d,$00
810F:         	end_62_40_61:
              	
              	; *********************************************************************************************
              	;                b!a+ byte write TOS to A and increment
              	; *********************************************************************************************
              	
810F:         	define_62_21_61_2b:
810F: 0603    		ld   b,end_62_21_61_2b-start_62_21_61_2b
8111: CDAE84  		call FARMacroExpander
8114:         	start_62_21_61_2b:
8114: 73      	    ld     (hl),e                 ; write out
8115: 23      	    inc   hl
8116: D1      	    pop   de                   ; update TOS
8117:         	end_62_21_61_2b:
              	
              	; *********************************************************************************************
              	;                  b!a byte write TOS to A
              	; *********************************************************************************************
              	
8117:         	define_62_21_61:
8117: 0602    		ld   b,end_62_21_61-start_62_21_61
8119: CDAE84  		call FARMacroExpander
811C:         	start_62_21_61:
811C: 73      	    ld     (hl),e                 ; write out
811D: D1      	    pop   de                   ; update TOS
811E:         	end_62_21_61:
              	
              	; *********************************************************************************************
              	;                  b@ byte indirect read
              	; *********************************************************************************************
              	
811E:         	define_62_40:
811E: 0604    		ld   b,end_62_40-start_62_40
8120: CDAE84  		call FARMacroExpander
8123:         	start_62_40:
8123: EB      	    ex     de,hl                 ; address to HL
8124: 5E      	    ld     e,(hl)                ; read it
8125: 1600    	    ld     d,$00
8127:         	end_62_40:
              	
              	; *********************************************************************************************
              	;                  b! byte indirect write
              	; *********************************************************************************************
              	
8127:         	define_62_21:
8127: 0604    		ld   b,end_62_21-start_62_21
8129: CDAE84  		call FARMacroExpander
812C:         	start_62_21:
812C: EB      	    ex     de,hl                 ; address to HL
812D: D1      	    pop   de                   ; data to DE
812E: 73      	    ld     (hl),e                 ; write it
812F: D1      	    pop   de                   ; fix up TOS
8130:         	end_62_21:
              	
              	; *********************************************************************************************
              	;                  nip drop second on stack
              	; *********************************************************************************************
              	
8130:         	define_6e_69_70:
8130: 0601    		ld   b,end_6e_69_70-start_6e_69_70
8132: CDAE84  		call FARMacroExpander
8135:         	start_6e_69_70:
8135: C1      	    pop   bc
8136:         	end_6e_69_70:
              	; *********************************************************************************************
              	; *********************************************************************************************
              	;
              	;    Name :     graphics.asm
              	;    Date :    13th January 2019
              	;    Author :   Paul Robson (paul@robsons.org.uk)
              	;    Purpose :  Kernel Graphics Words
              	;
              	; *********************************************************************************************
              	; *********************************************************************************************
              	
              	; *********************************************************************************************
              	;                  Set Graphics Mode
              	; *********************************************************************************************
              	
8136:         	define_67_66_78_2e_72_61_77_2e_73_65_74_6d_6f_64_65:
8136: DDE1    		pop ix
8138: 7B      	    ld     a,e
8139: CDB884  	    call   SYS_GFX_SetMode
813C: D1      	    pop   de
813D: DDE9    		jp (ix)
              	
              	; *********************************************************************************************
              	;                 Write to display (raw)
              	; *********************************************************************************************
              	
813F:         	define_67_66_78_2e_72_61_77_2e_77_72_69_74_65:
813F: DDE1    		pop ix
8141: EB      	    ex     de,hl
8142: D1      	    pop   de
8143: CDE284  	    call  SYS_GFX_Write
8146: D1      	    pop   de
8147: DDE9    		jp (ix)
              	
              	; *********************************************************************************************
              	;                Write to display (hex)
              	; *********************************************************************************************
              	
8149:         	define_67_66_78_2e_72_61_77_2e_77_72_69_74_65_68_65_78:
8149: DDE1    		pop ix
814B: EB      	    ex     de,hl
814C: D1      	    pop   de
814D: CDF584  	    call  SYS_GFX_WriteHex
8150: D1      	    pop   de
8151: DDE9    		jp (ix)
              	; *********************************************************************************************
              	; *********************************************************************************************
              	;
              	;    Name :     standard.asm
              	;    Date :    13th January 2019
              	;    Author :   Paul Robson (paul@robsons.org.uk)
              	;    Purpose :  Normal macro words for the Machine Forth system
              	;
              	; *********************************************************************************************
              	; *********************************************************************************************
              	
              	; *********************************************************************************************
              	;                  @ indirect read
              	; *********************************************************************************************
              	
8153:         	define_40:
8153: 0605    		ld   b,end_40-start_40
8155: CDAE84  		call FARMacroExpander
8158:         	start_40:
8158: EB      	    ex     de,hl                 ; address to HL
8159: 5E      	    ld     e,(hl)                ; read it
815A: 23      	    inc   hl
815B: 56      	    ld     d,(hl)
815C: 2B      	    dec   hl
815D:         	end_40:
              	
              	; *********************************************************************************************
              	;                  ! indirect write
              	; *********************************************************************************************
              	
815D:         	define_21:
815D: 0606    		ld   b,end_21-start_21
815F: CDAE84  		call FARMacroExpander
8162:         	start_21:
8162: EB      	    ex     de,hl                 ; address to HL
8163: D1      	    pop   de                   ; data to DE
8164: 73      	    ld     (hl),e                 ; write it
8165: 23      	    inc   hl
8166: 72      	    ld     (hl),d
8167: D1      	    pop   de                   ; fix up TOS
8168:         	end_21:
              	
              	; *********************************************************************************************
              	;                     or logical OR
              	; *********************************************************************************************
              	
8168:         	define_6f_72:
8168: DDE1    		pop ix
816A: C1      	    pop   bc
816B: 7A      	    ld     a,d
816C: B0      	    or     b
816D: 57      	    ld     d,a
816E: 7B      	    ld     a,e
816F: B1      	    or     c
8170: 5F      	    ld     e,a
8171: DDE9    		jp (ix)
              	
              	; *********************************************************************************************
              	;                     swap exchange top 2
              	; *********************************************************************************************
              	
8173:         	define_73_77_61_70:
8173: 0603    		ld   b,end_73_77_61_70-start_73_77_61_70
8175: CDAE84  		call FARMacroExpander
8178:         	start_73_77_61_70:
8178: EB      	    ex     de,hl                 ; HL = tos
8179: E3      	    ex     (sp),hl               ; swap it
817A: EB      	    ex     de,hl                 ; fix up
817B:         	end_73_77_61_70:
              	
817B:         	AlternateFont:                    ; nicer font
817B: 00000000	  db 0,0,0,0,0,0,0,0,12,30,30,12,12,0,12,0,54,54,0,0,0,0,0,0,54,54,127,54,127,54,54,0,24,62,96,60,6,124,24,0,0,99,102,12,24,51,99,0,28,54,28,59,110,102,59,0,48,48,96,0,0,0,0,0,12,24,48,48,48,24,12,0,48,24,12,12,12,24,48,0,0,51,30,127,30,51,0,0,0,24,24,126,24,24,0,0,0,0,0,0,0,24,24,48,0,0,0,126,0,0,0,0,0,0,0,0,0,24,24,0,3,6,12,24,48,96,64,0,62,99,103,111,123,115,62,0,24,56,24,24,24,24,126,0,60,102,6,28,48,102,126,0,60,102,6,28,6,102,60,0,14,30,54,102,127,6,15,0,126,96,124,6,6,102,60,0,28,48,96,124,102,102,60,0,126,102,6,12,24,24,24,0,60,102,102,60,102,102,60,0,60,102,102,62,6,12,56,0,0,24,24,0,0,24,24,0,0,24,24,0,0,24,24,48,12,24,48,96,48,24,12,0,0,0,126,0,0,126,0,0,48,24,12,6,12,24,48,0,60,102,6,12,24,0,24,0,62,99,111,111,111,96,60,0,24,60,102,102,126,102,102,0,126,51,51,62,51,51,126,0,30,51,96,96,96,51,30,0,124,54,51,51,51,54,124,0,127,49,52,60,52,49,127,0,127,49,52,60,52,48,120,0,30,51,96,96,103,51,31,0,102,102,102,126,102,102,102,0,60,24,24,24,24,24,60,0,15,6,6,6,102,102,60,0,115,51,54,60,54,51,115,0,120,48,48,48,49,51,127,0,99,119,127,127,107,99,99,0,99,115,123,111,103,99,99,0,28,54,99,99,99,54,28,0,126,51,51,62,48,48,120,0,60,102,102,102,110,60,14,0,126,51,51,62,54,51,115,0,60,102,112,56,14,102,60,0,126,90,24,24,24,24,60,0,102,102,102,102,102,102,126,0,102,102,102,102,102,60,24,0,99,99,99,107,127,119,99,0,99,99,54,28,28,54,99,0,102,102,102,60,24,24,60,0,127,99,70,12,25,51,127,0,60,48,48,48,48,48,60,0,96,48,24,12,6,3,1,0,60,12,12,12,12,12,60,0,8,28,54,99,0,0,0,0,0,0,0,0,0,0,0,127,24,24,12,0,0,0,0,0,0,0,60,6,62,102,59,0,112,48,48,62,51,51,110,0,0,0,60,102,96,102,60,0,14,6,6,62,102,102,59,0,0,0,60,102,126,96,60,0,28,54,48,120,48,48,120,0,0,0,59,102,102,62,6,124,112,48,54,59,51,51,115,0,24,0,56,24,24,24,60,0,6,0,6,6,6,102,102,60,112,48,51,54,60,54,115,0,56,24,24,24,24,24,60,0,0,0,102,127,127,107,99,0,0,0,124,102,102,102,102,0,0,0,60,102,102,102,60,0,0,0,110,51,51,62,48,120,0,0,59,102,102,62,6,15,0,0,110,59,51,48,120,0,0,0,62,96,60,6,124,0,8,24,62,24,24,26,12,0,0,0,102,102,102,102,59,0,0,0,102,102,102,60,24,0,0,0,99,107,127,127,54,0,0,0,99,54,28,54,99,0,0,0,102,102,102,62,6,124,0,0,126,76,24,50,126,0,14,24,24,112,24,24,14,0,12,12,12,0,12,12,12,0,112,24,24,14,24,24,112,0,59,110,0,0,0,0,0,0,0,0,0,0,0,0,0,0
817F: 00000000	
8183: 0C1E1E0C	
8187: 0C000C00	
818B: 36360000	
818F: 00000000	
8193: 36367F36	
8197: 7F363600	
819B: 183E603C	
819F: 067C1800	
81A3: 0063660C	
81A7: 18336300	
81AB: 1C361C3B	
81AF: 6E663B00	
81B3: 30306000	
81B7: 00000000	
81BB: 0C183030	
81BF: 30180C00	
81C3: 30180C0C	
81C7: 0C183000	
81CB: 00331E7F	
81CF: 1E330000	
81D3: 0018187E	
81D7: 18180000	
81DB: 00000000	
81DF: 00181830	
81E3: 0000007E	
81E7: 00000000	
81EB: 00000000	
81EF: 00181800	
81F3: 03060C18	
81F7: 30604000	
81FB: 3E63676F	
81FF: 7B733E00	
8203: 18381818	
8207: 18187E00	
820B: 3C66061C	
820F: 30667E00	
8213: 3C66061C	
8217: 06663C00	
821B: 0E1E3666	
821F: 7F060F00	
8223: 7E607C06	
8227: 06663C00	
822B: 1C30607C	
822F: 66663C00	
8233: 7E66060C	
8237: 18181800	
823B: 3C66663C	
823F: 66663C00	
8243: 3C66663E	
8247: 060C3800	
824B: 00181800	
824F: 00181800	
8253: 00181800	
8257: 00181830	
825B: 0C183060	
825F: 30180C00	
8263: 00007E00	
8267: 007E0000	
826B: 30180C06	
826F: 0C183000	
8273: 3C66060C	
8277: 18001800	
827B: 3E636F6F	
827F: 6F603C00	
8283: 183C6666	
8287: 7E666600	
828B: 7E33333E	
828F: 33337E00	
8293: 1E336060	
8297: 60331E00	
829B: 7C363333	
829F: 33367C00	
82A3: 7F31343C	
82A7: 34317F00	
82AB: 7F31343C	
82AF: 34307800	
82B3: 1E336060	
82B7: 67331F00	
82BB: 6666667E	
82BF: 66666600	
82C3: 3C181818	
82C7: 18183C00	
82CB: 0F060606	
82CF: 66663C00	
82D3: 7333363C	
82D7: 36337300	
82DB: 78303030	
82DF: 31337F00	
82E3: 63777F7F	
82E7: 6B636300	
82EB: 63737B6F	
82EF: 67636300	
82F3: 1C366363	
82F7: 63361C00	
82FB: 7E33333E	
82FF: 30307800	
8303: 3C666666	
8307: 6E3C0E00	
830B: 7E33333E	
830F: 36337300	
8313: 3C667038	
8317: 0E663C00	
831B: 7E5A1818	
831F: 18183C00	
8323: 66666666	
8327: 66667E00	
832B: 66666666	
832F: 663C1800	
8333: 6363636B	
8337: 7F776300	
833B: 6363361C	
833F: 1C366300	
8343: 6666663C	
8347: 18183C00	
834B: 7F63460C	
834F: 19337F00	
8353: 3C303030	
8357: 30303C00	
835B: 6030180C	
835F: 06030100	
8363: 3C0C0C0C	
8367: 0C0C3C00	
836B: 081C3663	
836F: 00000000	
8373: 00000000	
8377: 0000007F	
837B: 18180C00	
837F: 00000000	
8383: 00003C06	
8387: 3E663B00	
838B: 7030303E	
838F: 33336E00	
8393: 00003C66	
8397: 60663C00	
839B: 0E06063E	
839F: 66663B00	
83A3: 00003C66	
83A7: 7E603C00	
83AB: 1C363078	
83AF: 30307800	
83B3: 00003B66	
83B7: 663E067C	
83BB: 7030363B	
83BF: 33337300	
83C3: 18003818	
83C7: 18183C00	
83CB: 06000606	
83CF: 0666663C	
83D3: 70303336	
83D7: 3C367300	
83DB: 38181818	
83DF: 18183C00	
83E3: 0000667F	
83E7: 7F6B6300	
83EB: 00007C66	
83EF: 66666600	
83F3: 00003C66	
83F7: 66663C00	
83FB: 00006E33	
83FF: 333E3078	
8403: 00003B66	
8407: 663E060F	
840B: 00006E3B	
840F: 33307800	
8413: 00003E60	
8417: 3C067C00	
841B: 08183E18	
841F: 181A0C00	
8423: 00006666	
8427: 66663B00	
842B: 00006666	
842F: 663C1800	
8433: 0000636B	
8437: 7F7F3600	
843B: 00006336	
843F: 1C366300	
8443: 00006666	
8447: 663E067C	
844B: 00007E4C	
844F: 18327E00	
8453: 0E181870	
8457: 18180E00	
845B: 0C0C0C00	
845F: 0C0C0C00	
8463: 7018180E	
8467: 18187000	
846B: 3B6E0000	
846F: 00000000	
8473: 00...   	
              	
              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;    Name :     farmemory.asm
              	;    Author :  paul@robsons.org.uk
              	;    Date :     11th January 2019
              	;    Purpose :  Kernel - Far memory routines.
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
              	; ***********************************************************************************************
              	;
              	;                Byte compile far memory A
              	;
              	; ***********************************************************************************************
              	
847B:         	FARCompileByte:
847B: F5      	    push   af                   ; save byte and HL
847C: E5      	    push   hl
847D: F5      	    push   af                   ; save byte
847E: 3A2980  	    ld    a,(HerePage)             ; switch to page
8481: CD0686  	    call   PAGESwitch
8484: 2A2780  	    ld     hl,(Here)               ; write to memory location
8487: F1      	    pop   af
8488: 77      	    ld     (hl),a
8489: 23      	    inc   hl                   ; bump memory location
848A: 222780  	    ld     (Here),hl               ; write back
848D: CD1F86  	    call   PAGERestore
8490: E1      	    pop   hl                   ; restore and exit
8491: F1      	    pop   af
8492: C9      	    ret
              	
              	; ***********************************************************************************************
              	;
              	;                Word compile far memory HL
              	;
              	; ***********************************************************************************************
              	
8493:         	FARCompileWord:
8493: F5      	    push   af                   ; save byte and HL
8494: D5      	    push   de
8495: E5      	    push   hl
8496: EB      	    ex     de,hl                 ; word into DE
8497: 3A2980  	    ld    a,(HerePage)             ; switch to page
849A: CD0686  	    call   PAGESwitch
849D: 2A2780  	    ld     hl,(Here)               ; write to memory location
84A0: 73      	    ld     (hl),e
84A1: 23      	    inc   hl
84A2: 72      	    ld     (hl),d
84A3: 23      	    inc   hl
84A4: 222780  	    ld     (Here),hl               ; write back
84A7: CD1F86  	    call   PAGERestore
84AA: E1      	    pop   hl
84AB: D1      	    pop   de                   ; restore and exit
84AC: F1      	    pop   af
84AD: C9      	    ret
              	
              	; ***********************************************************************************************
              	;
              	;                Expand macro during compilation
              	;
              	; ***********************************************************************************************
              	
84AE:         	FARMacroExpander:
84AE: E3      	    ex     (sp),hl               ; old HL on stack, following code address in HL
84AF:         	__MacroCopy:                    ; (B already has count)
84AF: 7E      	    ld    a,(hl)                ; get next
84B0: 23      	    inc   hl
84B1: CD7B84  	    call   FARCompileByte             ; compile it
84B4: 10F9    	    djnz   __MacroCopy
84B6: E1      	    pop   hl                   ; restore old HL
84B7: C9      	    ret
              	; *********************************************************************************
              	; *********************************************************************************
              	;
              	;    File:    graphics.asm
              	;    Purpose:  General screen I/O routines
              	;    Date :     5th January 2019
              	;    Author:    paul@robsons.org.uk
              	;
              	; *********************************************************************************
              	; *********************************************************************************
              	
              	; *********************************************************************************
              	;
              	;                Set Graphics Mode to L
              	;
              	; *********************************************************************************
              	
84B8:         	SYS_GFX_SetMode:
84B8: C5      	    push   bc
84B9: D5      	    push   de
84BA: E5      	    push   hl
84BB: 7D      	    ld     a,l                 ; save new mode.
84BC: 324380  	    ld     (SIScreenMode),a
84BF: 2D      	    dec   l                   ; L = 1 mode layer2
84C0: 2808    	    jr     z,__GFXLayer2
84C2: 2D      	    dec   l
84C3: 280A    	    jr     z,__GFXLowRes             ; L = 2 mode lowres
              	
84C5: CD3586  	    call   GFXInitialise48k          ; L = 0 or anything else, 48k mode.
84C8: 1808    	    jr     __GFXConfigure
              	
84CA:         	__GFXLayer2:
84CA: CDAD86  	    call   GFXInitialiseLayer2
84CD: 1803    	    jr     __GFXConfigure
              	
84CF:         	__GFXLowRes:
84CF: CD6487  	    call   GFXInitialiseLowRes
              	
84D2:         	__GFXConfigure:
84D2: 7D      	    ld     a,l                 ; save screen size
84D3: 323B80  	    ld     (SIScreenWidth),a
84D6: 7C      	    ld     a,h
84D7: 323F80  	    ld     (SIScreenHeight),a
84DA: EB      	    ex     de,hl                 ; save driver
84DB: 224980  	    ld     (SIScreenDriver),hl
              	
84DE: E1      	    pop   hl
84DF: D1      	    pop   de
84E0: C1      	    pop   bc
84E1: C9      	    ret
              	
              	; *********************************************************************************
              	;
              	;    Write character D (colour) E (character) to position HL.
              	;
              	; *********************************************************************************
              	
84E2:         	SYS_GFX_Write:
84E2: F5      	    push   af
84E3: C5      	    push   bc
84E4: D5      	    push   de
84E5: E5      	    push   hl
84E6: 01F084  	    ld     bc,__GFXWCExit
84E9: C5      	    push   bc
84EA: ED4B4980	    ld     bc,(SIScreenDriver)
84EE: C5      	    push   bc
84EF: C9      	    ret
84F0:         	__GFXWCExit:
84F0: E1      	    pop   hl
84F1: D1      	    pop   de
84F2: C1      	    pop   bc
84F3: F1      	    pop   af
84F4: C9      	    ret
              	
              	; *********************************************************************************
              	;
              	;            Write hex word DE at position HL
              	;
              	; *********************************************************************************
              	
84F5:         	SYS_GFX_WriteHex:
84F5: 3E05    	    ld     a,5
84F7:         	GFXWriteHexWordA:
84F7: C5      	    push   bc
84F8: D5      	    push   de
84F9: E5      	    push   hl
84FA: 4F      	    ld     c,a
84FB: 7A      	    ld     a,d
84FC: D5      	    push   de
84FD: CD0985  	    call   __GFXWHByte
8500: D1      	    pop   de
8501: 7B      	    ld     a,e
8502: CD0985  	    call  __GFXWHByte
8505: E1      	    pop   hl
8506: D1      	    pop   de
8507: C1      	    pop   bc
8508: C9      	    ret
              	
8509:         	__GFXWHByte:
8509: F5      	    push   af
850A: CB0F    	    rrc   a
850C: CB0F    	    rrc    a
850E: CB0F    	    rrc   a
8510: CB0F    	    rrc   a
8512: CD1685  	    call   __GFXWHNibble
8515: F1      	    pop   af
8516:         	__GFXWHNibble:
8516: 51      	    ld     d,c
8517: E60F    	    and   15
8519: FE0A    	    cp     10
851B: 3802    	    jr     c,__GFXWHDigit
851D: C607    	    add    a,7
851F:         	__GFXWHDigit:
851F: C630    	    add   a,48
8521: 5F      	    ld     e,a
8522: CDE284  	    call   SYS_GFX_Write
8525: 23      	    inc   hl
8526: C9      	    ret
              	; *********************************************************************************
              	; *********************************************************************************
              	;
              	;    File:    keyboard.asm
              	;    Purpose:  Spectrum Keyboard Interface
              	;    Date :     27th December 2018
              	;    Author:    paul@robsons.org.uk
              	;
              	; *********************************************************************************
              	; *********************************************************************************
              	
              	
              	; *********************************************************************************
              	;
              	;      Scan the keyboard, return currently pressed key code in A
              	;
              	; *********************************************************************************
              	
8527:         	IOScanKeyboard:
8527: C5      	    push   bc
8528: D5      	    push   de
8529: E5      	    push   hl
              	
852A: 217C85  	    ld     hl,__kr_no_shift_table         ; firstly identify shift state.
              	
852D: 0EFE    	    ld     c,$FE                 ; check CAPS SHIFT (emulator : left shift)
852F: 06FE    	    ld     b,$FE
8531: ED78    	    in     a,(c)
8533: CB47    	    bit   0,a
8535: 2005    	    jr     nz,__kr1
8537: 21A485  	    ld     hl,__kr_shift_table
853A: 180B    	    jr     __kr2
853C:         	__kr1:
853C: 067F    	    ld     b,$7F                 ; check SYMBOL SHIFT (emulator : right shift)
853E: ED78    	    in     a,(c)
8540: CB4F    	    bit   1,a
8542: 2003    	    jr     nz,__kr2
8544: 21CC85  	    ld     hl,__kr_symbol_shift_table
8547:         	__kr2:
              	
8547: 1EFE    	    ld     e,$FE                 ; scan pattern.
8549: 7B      	__kr3:  ld     a,e                 ; work out the mask, so we don't detect shift keys
854A: 161E    	    ld     d,$1E                 ; $FE row, don't check the least significant bit.
854C: FEFE    	    cp     $FE
854E: 2808    	    jr     z,___kr4
8550: 161D    	    ld     d,$01D                 ; $7F row, don't check the 2nd least significant bit
8552: FE7F    	    cp     $7F
8554: 2802    	    jr     z,___kr4
8556: 161F    	    ld     d,$01F                 ; check all bits.
8558:         	___kr4:
8558: 43      	    ld     b,e                 ; scan the keyboard
8559: 0EFE    	    ld     c,$FE
855B: ED78    	    in     a,(c)
855D: 2F      	    cpl                     ; make that active high.
855E: A2      	    and   d                    ; and with check value.
855F: 2011    	    jr     nz,__kr_keypressed           ; exit loop if key pressed.
              	
8561: 23      	    inc   hl                   ; next set of keyboard characters
8562: 23      	    inc   hl
8563: 23      	    inc   hl
8564: 23      	    inc   hl
8565: 23      	    inc   hl
              	
8566: 7B      	    ld     a,e                 ; get pattern
8567: 87      	    add   a,a                 ; shift left
8568: F601    	    or     1                   ; set bit 1.
856A: 5F      	    ld     e,a
              	
856B: FEFF    	    cp     $FF                 ; finished when all 1's.
856D: 20DA    	    jr     nz,__kr3
856F: AF      	    xor   a
8570: 1806    	    jr     __kr_exit               ; no key found, return with zero.
              	;
8572:         	__kr_keypressed:
8572: 23      	    inc   hl                  ; shift right until carry set
8573: 1F      	    rra
8574: 30FC    	    jr     nc,__kr_keypressed
8576: 2B      	    dec   hl                   ; undo the last inc hl
8577: 7E      	    ld     a,(hl)                 ; get the character number.
8578:         	__kr_exit:
8578: E1      	    pop   hl
8579: D1      	    pop   de
857A: C1      	    pop   bc
857B: C9      	    ret
              	
              	; *********************************************************************************
              	;               Keyboard Mapping Tables
              	; *********************************************************************************
              	;
              	;  $FEFE-$7FFE scan, bit 0-4, active low
              	;
              	;  3:Abort (Shift+Q) 8:Backspace 13:Return
              	;  27:Break 32-127: Std ASCII all L/C
              	;
857C:         	__kr_no_shift_table:
857C: 007A7863	    db     0,  'z','x','c','v',      'a','s','d','f','g'
8580: 76617364	
8584: 6667    	
8586: 71776572	    db     'q','w','e','r','t',      '1','2','3','4','5'
858A: 74313233	
858E: 3435    	
8590: 30393837	    db     '0','9','8','7','6',      'p','o','i','u','y'
8594: 36706F69	
8598: 7579    	
859A: 0D6C6B6A	    db     13, 'l','k','j','h',      ' ', 0, 'm','n','b'
859E: 6820006D	
85A2: 6E62    	
              	
85A4:         	__kr_shift_table:
85A4: 003A003F	    db      0, ':', 0,  '?','/',      '~','|','\','{','}'
85A8: 2F7E7C5C	
85AC: 7B7D    	
85AE: 0300003C	    db      3,  0,  0  ,'<','>',      '!','@','#','$','%'
85B2: 3E214023	
85B6: 2425    	
85B8: 5F292827	    db     '_',')','(',"'",'&',      '"',';', 0, ']','['
85BC: 26223B00	
85C0: 5D5B    	
85C2: 1B3D2B2D	    db     27, '=','+','-','^',      ' ', 0, '.',',','*'
85C6: 5E20002E	
85CA: 2C2A    	
              	
85CC:         	__kr_symbol_shift_table:
85CC: 003A003F	    db     0,  ':',0  ,'?','/',      '~','|','\','{','}'
85D0: 2F7E7C5C	
85D4: 7B7D    	
85D6: 0300003C	    db     3,  0,  0  ,'<','>',      16,17,18,19,20
85DA: 3E101112	
85DE: 1314    	
85E0: 08291716	    db     8, ')',23,  22, 21,        '"',';', 0, ']','['
85E4: 15223B00	
85E8: 5D5B    	
85EA: 1B3D2B2D	    db     27, '=','+','-','^',      ' ', 0, '.',',','*'
85EE: 5E20002E	
85F2: 2C2A    	
              	; ***************************************************************************************
              	; ***************************************************************************************
              	;
              	;    Name :     paging.asm
              	;    Author :  paul@robsons.org.uk
              	;    Date :     5th January 2018
              	;    Purpose :  Paging Manager
              	;
              	; ***************************************************************************************
              	; ***************************************************************************************
              	
              	; ********************************************************************************************************
              	;
              	;                   Initialise Paging, set current to A
              	;
              	; ********************************************************************************************************
              	
85F4:         	PAGEInitialise:
85F4: E5      	    push   hl
85F5: ED9256  	    db     $ED,$92,$56              ; switch to page A
85F8: 3C      	    inc   a
85F9: ED9257  	    db     $ED,$92,$57
85FC: 3D      	    dec   a
85FD: 08      	    ex     af,af'                 ; put page in A'
85FE: 214D80  	    ld     hl,__PAGEStackBase           ; reset the page stack
8601: 224B80  	    ld     (__PAGEStackPointer),hl
8604: E1      	    pop   hl
8605: C9      	    ret
              	
              	; ********************************************************************************************************
              	;
              	;                    Switch to a new page A
              	;
              	; ********************************************************************************************************
              	
8606:         	SYS_Page_Switch:
8606:         	PAGESwitch:
8606: F5      	    push   af
8607: E5      	    push   hl
              	
8608: F5      	    push   af                   ; save A on stack
8609: 2A4B80  	    ld     hl,(__PAGEStackPointer)       ; put A' on the stack, the current page
860C: 08      	    ex     af,af'
860D: 77      	    ld     (hl),a
860E: 23      	    inc   hl
860F: 224B80  	    ld     (__PAGEStackPointer),hl
              	
8612: F1      	    pop   af                   ; restore new A
8613: ED9256  	    db     $ED,$92,$56              ; switch to page A
8616: 3C      	    inc   a
8617: ED9257  	    db     $ED,$92,$57
861A: 3D      	    dec   a
861B: 08      	    ex     af,af'                 ; put page in A'
              	
861C: E1      	    pop   hl
861D: F1      	    pop   af
861E: C9      	    ret
              	
              	; ********************************************************************************************************
              	;
              	;                    Return to the previous page
              	;
              	; ********************************************************************************************************
              	
861F:         	SYS_Page_Restore:
861F:         	PAGERestore:
861F: F5      	    push   af
8620: E5      	    push   hl
8621: 2A4B80  	    ld     hl,(__PAGEStackPointer)       ; pop the old page off
8624: 2B      	    dec   hl
8625: 7E      	    ld     a,(hl)
8626: 224B80  	    ld     (__PAGEStackPointer),hl
8629: ED9256  	    db     $ED,$92,$56              ; switch to page A
862C: 3C      	    inc   a
862D: ED9257  	    db     $ED,$92,$57
8630: 3D      	    dec   a
8631: 08      	    ex     af,af'                 ; update A'
8632: E1      	    pop   hl
8633: F1      	    pop   af
8634: C9      	    ret
              	
              	; *********************************************************************************
              	; *********************************************************************************
              	;
              	;    File:    screen48k.asm
              	;    Purpose:  Hardware interface to Spectrum display, standard but with
              	;          sprites enabled.
              	;    Date :     5th January 2019
              	;    Author:    paul@robsons.org.uk
              	;
              	; *********************************************************************************
              	; *********************************************************************************
              	
              	; *********************************************************************************
              	;
              	;            Call the SetMode for the Spectrum 48k
              	;
              	; *********************************************************************************
              	
8635:         	GFXInitialise48k:
8635: F5      	    push   af                   ; save registers
8636: C5      	    push   bc
              	
8637: 013B12  	    ld     bc,$123B               ; Layer 2 access port
863A: 3E00    	    ld     a,0                 ; disable Layer 2
863C: ED79    	    out   (c),a
863E: ED911503	    db     $ED,$91,$15,$3            ; Disable LowRes but enable Sprites
              	
8642: 210040  	    ld     hl,$4000               ; clear pixel memory
8645: 3600    	__cs1:  ld     (hl),0
8647: 23      	    inc   hl
8648: 7C      	    ld     a,h
8649: FE58    	    cp     $58
864B: 20F8    	    jr     nz,__cs1
864D: 3647    	__cs2:  ld     (hl),$47              ; clear attribute memory
864F: 23      	    inc   hl
8650: 7C      	    ld     a,h
8651: FE5B    	    cp     $5B
8653: 20F8    	    jr     nz,__cs2
8655: AF      	    xor   a                   ; border off
8656: D3FE    	    out   ($FE),a
8658: C1      	    pop   bc
8659: F1      	    pop   af
865A: 212018  	    ld     hl,$1820               ; H = 24,L = 32, screen extent
865D: 116186  	    ld     de,GFXPrintCharacter48k
8660: C9      	    ret
              	
              	; *********************************************************************************
              	;
              	;        Write a character E on the screen at HL, in colour D
              	;
              	; *********************************************************************************
              	
8661:         	GFXPrintCharacter48k:
8661: F5      	    push   af                   ; save registers
8662: C5      	    push   bc
8663: D5      	    push   de
8664: E5      	    push   hl
              	
8665: 43      	    ld     b,e                 ; character in B
8666: 7C      	    ld     a,h                 ; check range.
8667: FE03    	    cp     3
8669: 303D    	    jr     nc,__ZXWCExit
              	;
              	;    work out attribute position
              	;
866B: E5      	    push   hl                   ; save position.
866C: 7C      	    ld     a,h
866D: C658    	    add   $58
866F: 67      	    ld     h,a
              	
8670: 7A      	    ld     a,d                 ; get current colour
8671: E607    	    and   7                    ; mask 0..2
8673: F640    	    or     $40                  ; make bright
8675: 77      	    ld     (hl),a                 ; store it.
8676: E1      	    pop   hl
              	;
              	;    calculate screen position => HL
              	;
8677: D5      	    push   de
8678: EB      	    ex     de,hl
8679: 6B      	    ld     l,e                 ; Y5 Y4 Y3 X4 X3 X2 X1 X0
867A: 7A      	    ld     a,d
867B: E603    	    and   3
867D: 87      	    add   a,a
867E: 87      	    add   a,a
867F: 87      	    add   a,a
8680: F640    	    or     $40
8682: 67      	    ld     h,a
8683: D1      	    pop   de
              	;
              	;    char# 32-127 to font address => DE
              	;
8684: E5      	    push   hl
8685: 78      	    ld     a,b                 ; get character
8686: E67F    	    and   $7F                 ; bits 0-6 only.
8688: D620    	    sub   32
868A: 6F      	    ld     l,a                 ; put in HL
868B: 2600    	    ld     h,0
868D: 29      	    add   hl,hl                 ; x 8
868E: 29      	    add   hl,hl
868F: 29      	    add   hl,hl
8690: ED5B4780	    ld     de,(SIFontBase)           ; add the font base.
8694: 19      	    add   hl,de
8695: EB      	    ex     de,hl                 ; put in DE (font address)
8696: E1      	    pop   hl
              	;
              	;    copy font data to screen position.
              	;
8697: 78      	    ld     a,b
8698: 0608    	    ld     b,8                 ; copy 8 characters
869A: 0E00    	    ld     c,0                 ; XOR value 0
869C: CB7F    	    bit   7,a                 ; is the character reversed
869E: 2801    	    jr     z,__ZXWCCopy
86A0: 0D      	    dec   c                   ; C is the XOR mask now $FF
86A1:         	__ZXWCCopy:
86A1: 1A      	    ld     a,(de)                ; get font data
86A2: A9      	    xor   c                   ; xor with reverse
86A3: 77      	    ld     (hl),a                 ; write back
86A4: 24      	    inc   h                   ; bump pointers
86A5: 13      	    inc   de
86A6: 10F9    	    djnz   __ZXWCCopy               ; do B times.
86A8:         	__ZXWCExit:
86A8: E1      	    pop   hl                   ; restore and exit
86A9: D1      	    pop   de
86AA: C1      	    pop   bc
86AB: F1      	    pop   af
86AC: C9      	    ret
              	; *********************************************************************************
              	; *********************************************************************************
              	;
              	;    File:    screen_layer2.asm
              	;    Purpose:  Layer 2 console interface, sprites enabled, no shadow.
              	;    Date :     5th January 2019
              	;    Author:    paul@robsons.org.uk
              	;
              	; *********************************************************************************
              	; *********************************************************************************
              	
              	; *********************************************************************************
              	;
              	;                Clear Layer 2 Display.
              	;
              	; *********************************************************************************
              	
              	
86AD:         	GFXInitialiseLayer2:
86AD: F5      	    push   af
86AE: C5      	    push   bc
86AF: D5      	    push   de
86B0: ED911503	    db     $ED,$91,$15,$3            ; Disable LowRes but enable Sprites
              	
86B4: 1E02    	    ld     e,2                 ; 3 banks to erase
86B6:         	L2PClear:
86B6: 7B      	    ld     a,e                 ; put bank number in bits 6/7
86B7: CB0F    	    rrc   a
86B9: CB0F    	    rrc   a
86BB: F603    	    or     2+1                 ; shadow on, visible, enable write paging
86BD: 013B12  	    ld     bc,$123B               ; out to layer 2 port
86C0: ED79    	    out   (c),a
86C2: 210040  	    ld     hl,$4000               ; erase the bank to $00
86C5:         	L2PClearBank:                     ; assume default palette :)
86C5: 2B      	    dec   hl
86C6: 3600    	    ld     (hl),$00
86C8: 7C      	    ld     a,h
86C9: B5      	    or     l
86CA: 20F9    	    jr    nz,L2PClearBank
86CC: 1D      	    dec   e
86CD: F2B686  	    jp     p,L2PClear
              	
86D0: AF      	    xor   a
86D1: D3FE    	    out   ($FE),a
              	
86D3: D1      	    pop   de
86D4: C1      	    pop   bc
86D5: F1      	    pop   af
86D6: 212018  	    ld     hl,$1820               ; still 32 x 24
86D9: 11DD86  	    ld     de,GFXPrintCharacterLayer2
86DC: C9      	    ret
              	;
              	;    Print Character E, colour D, position HL
              	;
86DD:         	GFXPrintCharacterLayer2:
86DD: F5      	    push   af
86DE: C5      	    push   bc
86DF: D5      	    push   de
86E0: E5      	    push   hl
86E1: DDE5    	    push   ix
              	
86E3: 43      	    ld     b,e                 ; save A temporarily
86E4: 78      	    ld     a,b
86E5: E67F    	    and   $7F
86E7: FE20    	    cp     32
86E9: 3872    	    jr     c,__L2Exit               ; check char in range
86EB: 7C      	    ld     a,h
86EC: FE03    	    cp     3
86EE: 306D    	    jr     nc,__L2Exit             ; check position in range
86F0: 78      	    ld     a,b
              	
86F1: F5      	    push   af
86F2: AF      	    xor   a                   ; convert colour in C to palette index
86F3: CB42    	    bit   0,d                 ; (assumes standard palette)
86F5: 2802    	    jr     z,__L2Not1
86F7: F603    	    or     $03
86F9:         	__L2Not1:
86F9: CB52    	    bit   2,d
86FB: 2802    	    jr     z,__L2Not2
86FD: F61C    	    or     $1C
86FF:         	__L2Not2:
86FF: CB4A    	    bit   1,d
8701: 2802    	    jr     z,__L2Not3
8703: F6C0    	    or     $C0
8705:         	__L2Not3:
8705: 4F      	    ld     c,a                 ; C is foreground
8706: 0600    	    ld     b,0                  ; B is xor flipper, initially zero
8708: F1      	    pop   af                   ; restore char
              	
8709: E5      	    push   hl
870A: CB7F    	    bit   7,a                 ; adjust background bit on bit 7
870C: 2802    	    jr     z,__L2NotCursor
870E: 06FF    	    ld     b,$FF                 ; light grey is cursor
8710:         	__L2NotCursor:
8710: E67F    	    and   $7F                 ; offset from space
8712: D620    	    sub   $20
8714: 6F      	    ld     l,a                 ; put into HL
8715: 2600    	    ld     h,0
8717: 29      	    add   hl,hl                 ; x 8
8718: 29      	    add   hl,hl
8719: 29      	    add   hl,hl
              	
871A: E5      	    push   hl                   ; transfer to IX
871B: DDE1    	    pop   ix
871D: E1      	    pop   hl
              	
871E: C5      	    push   bc                   ; add the font base to it.
871F: ED4B4780	    ld     bc,(SIFontBase)
8723: DD09    	    add   ix,bc
8725: C1      	    pop   bc
              	    ;
              	    ;    figure out the correct bank.
              	    ;
8726: C5      	    push   bc
8727: 7C      	    ld    a,h                 ; this is the page number.
8728: CB0F    	    rrc   a
872A: CB0F    	    rrc   a
872C: E6C0    	    and   $C0                 ; in bits 6 & 7
872E: F603    	    or     $03                 ; shadow on, visible, enable write pagin.
8730: 013B12  	    ld     bc,$123B               ; out to layer 2 port
8733: ED79    	    out   (c),a
8735: C1      	    pop   bc
              	    ;
              	    ;     now figure out position in bank
              	    ;
8736: EB      	    ex     de,hl
8737: 6B      	    ld     l,e
8738: 2600    	    ld     h,0
873A: 29      	    add   hl,hl
873B: 29      	    add   hl,hl
873C: 29      	    add   hl,hl
873D: CB24    	    sla   h
873F: CB24    	    sla   h
8741: CB24    	    sla   h
              	
8743: 1E08    	    ld     e,8                 ; do 8 rows
8745:         	__L2Outer:
8745: E5      	    push   hl                   ; save start
8746: 1608    	    ld     d,8                 ; do 8 columns
8748: DD7E00  	    ld     a,(ix+0)               ; get the bit pattern
874B: A8      	    xor   b                   ; maybe flip it ?
874C: DD23    	    inc   ix
874E:         	__L2Loop:
874E: 3600    	    ld     (hl),0                 ; background
8750: 87      	    add   a,a                 ; shift pattern left
8751: 3001    	    jr     nc,__L2NotSet
8753: 71      	    ld     (hl),c                 ; if MSB was set, overwrite with fgr
8754:         	__L2NotSet:
8754: 23      	    inc   hl
8755: 15      	    dec   d                   ; do a row
8756: 20F6    	    jr     nz,  __L2Loop
8758: E1      	    pop   hl                   ; restore, go 256 bytes down.
8759: 24      	    inc   h
875A: 1D      	    dec   e                   ; do 8 rows
875B: 20E8    	    jr     nz,__L2Outer
875D:         	__L2Exit:
875D: DDE1    	    pop   ix
875F: E1      	    pop   hl
8760: D1      	    pop   de
8761: C1      	    pop   bc
8762: F1      	    pop   af
8763: C9      	    ret
              	; *********************************************************************************
              	; *********************************************************************************
              	;
              	;    File:    screen_lores.asm
              	;    Purpose:  LowRes console interface, sprites enabled.
              	;    Date :     5th January 2019
              	;    Author:    paul@robsons.org.uk
              	;
              	; *********************************************************************************
              	; *********************************************************************************
              	
              	; *********************************************************************************
              	;
              	;                Clear LowRes Display.
              	;
              	; *********************************************************************************
              	
8764:         	GFXInitialiseLowRes:
8764: F5      	    push   af
8765: C5      	    push   bc
8766: D5      	    push   de
              	
8767: ED911583	    db     $ED,$91,$15,$83            ; Enable LowRes and enable Sprites
876B: AF      	    xor   a                   ; layer 2 off.
876C: 013B12  	    ld     bc,$123B               ; out to layer 2 port
876F: ED79    	    out   (c),a
              	
8771: 210040  	    ld     hl,$4000               ; erase the bank to $00
8774: 110060  	    ld     de,$6000
8777:         	LowClearScreen:                   ; assume default palette :)
8777: AF      	    xor   a
8778: 77      	    ld     (hl),a
8779: 12      	    ld     (de),a
877A: 23      	    inc   hl
877B: 13      	    inc   de
877C: 7C      	    ld     a,h
877D: FE58    	    cp     $58
877F: 20F6    	    jr    nz,LowClearScreen
8781: AF      	    xor   a
8782: D3FE    	    out   ($FE),a
8784: D1      	    pop   de
8785: C1      	    pop   bc
8786: F1      	    pop   af
8787: 21100C  	    ld     hl,$0C10               ; resolution is 16x12 chars
878A: 118E87  	    ld     de,GFXPrintCharacterLowRes
878D: C9      	    ret
              	;
              	;    Print Character E Colour D @ HL
              	;
878E:         	GFXPrintCharacterLowRes:
878E: F5      	    push   af
878F: C5      	    push   bc
8790: D5      	    push   de
8791: E5      	    push   hl
8792: DDE5    	    push   ix
              	
8794: 43      	    ld     b,e                 ; save character in B
8795: 7B      	    ld     a,e
8796: E67F    	    and   $7F
8798: FE20    	    cp     32
879A: 3866    	    jr     c,__LPExit
              	
879C: 29      	    add   hl,hl
879D: 29      	    add   hl,hl
879E: 7C      	    ld     a,h                 ; check in range 192*4 = 768
879F: FE03    	    cp     3
87A1: 305F    	    jr     nc,__LPExit
              	
87A3: 7A      	    ld     a,d                 ; only lower 3 bits of colour
87A4: E607    	    and   7
87A6: 4F      	    ld     c,a                 ; C is foreground
              	
87A7: E5      	    push   hl
87A8: 78      	    ld     a,b                 ; get char back
87A9: 0600    	    ld     b,0                 ; B = no flip colour.
87AB: CB7F    	    bit   7,a
87AD: 2801    	    jr     z,__LowNotReverse           ; but 7 set, flip is $FF
87AF: 05      	    dec   b
87B0:         	__LowNotReverse:
87B0: E67F    	    and   $7F                 ; offset from space
87B2: D620    	    sub   $20
87B4: 6F      	    ld     l,a                 ; put into HL
87B5: 2600    	    ld     h,0
87B7: 29      	    add   hl,hl                 ; x 8
87B8: 29      	    add   hl,hl
87B9: 29      	    add   hl,hl
              	
87BA: E5      	    push   hl                   ; transfer to IX
87BB: DDE1    	    pop   ix
              	
87BD: C5      	    push   bc                   ; add the font base to it.
87BE: ED4B4780	    ld     bc,(SIFontBase)
87C2: DD09    	    add   ix,bc
87C4: C1      	    pop   bc
87C5: E1      	    pop   hl
87C6: EB      	    ex     de,hl
87C7: 7B      	    ld     a,e                 ; put DE => HL
87C8: E6C0    	    and   192                 ; these are part of Y
87CA: 6F      	    ld     l,a                  ; Y multiplied by 4 then 32 = 128
87CB: 62      	    ld     h,d
87CC: 29      	    add   hl,hl
87CD: 29      	    add   hl,hl
87CE: 29      	    add   hl,hl
87CF: 29      	    add   hl,hl
87D0: CBF4    	    set   6,h                 ; put into $4000 range
              	
87D2: 3E3C    	    ld     a,15*4                 ; mask for X, which has been premultiplied.
87D4: A3      	    and   e                   ; and with E, gives X position
87D5: 87      	    add   a,a                 ; now multiplied by 8.
87D6: 5F      	    ld     e,a                 ; DE is x offset.
87D7: 1600    	    ld     d,0
              	
87D9: 19      	    add   hl,de
87DA: 7C      	    ld     a,h
87DB: FE58    	    cp     $58                 ; need to be shifted to 2nd chunk ?
87DD: 3804    	    jr     c,__LowNotLower2
87DF: 110008  	    ld     de,$0800
87E2: 19      	    add   hl,de
87E3:         	__LowNotLower2:
87E3: 1E08    	    ld     e,8                 ; do 8 rows
87E5:         	__LowOuter:
87E5: E5      	    push   hl                   ; save start
87E6: 1608    	    ld     d,8                 ; do 8 columns
87E8: DD7E00  	    ld     a,(ix+0)               ; get the bit pattern
87EB: A8      	    xor   b
87EC: DD23    	    inc   ix
87EE:         	__LowLoop:
87EE: 3600    	    ld     (hl),0                 ; background
87F0: 87      	    add   a,a                 ; shift pattern left
87F1: 3001    	    jr     nc,__LowNotSet
87F3: 71      	    ld     (hl),c                 ; if MSB was set, overwrite with fgr
87F4:         	__LowNotSet:
87F4: 2C      	    inc   l
87F5: 15      	    dec   d                   ; do a row
87F6: 20F6    	    jr     nz,  __LowLoop
87F8: E1      	    pop   hl                   ; restore, go 256 bytes down.
87F9: D5      	    push   de
87FA: 118000  	    ld     de,128
87FD: 19      	    add   hl,de
87FE: D1      	    pop   de
87FF: 1D      	    dec   e                   ; do 8 rows
8800: 20E3    	    jr     nz,__LowOuter
8802:         	__LPExit:
8802: DDE1    	    pop   ix
8804: E1      	    pop   hl
8805: D1      	    pop   de
8806: C1      	    pop   bc
8807: F1      	    pop   af
8808: C9      	    ret
              	
8809:         	FreeMemory:
8809: FFFFFFFF		org $C000
880D: FF...   	
C000: 0622    		db    6,$22
C002: 5D81    		dw    define_21
C004: 8121    		db    129,"!"
              	
C006: 0822    		db    8,$22
C008: 7180    		dw    define_21_61_2b
C00A: 8321612B		db    131,"!a+"
              	
C00E: 0722    		db    7,$22
C010: 7B80    		dw    define_21_61
C012: 822161  		db    130,"!a"
              	
C015: 0622    		db    6,$22
C017: 9D80    		dw    define_2a
C019: 012A    		db    1,"*"
              	
C01B: 0622    		db    6,$22
C01D: CE80    		dw    define_2b
C01F: 812B    		db    129,"+"
              	
C021: 0822    		db    8,$22
C023: B880    		dw    define_2d_6f_72
C025: 032D6F72		db    3,"-or"
              	
C029: 0722    		db    7,$22
C02B: 8C80    		dw    define_32_2a
C02D: 82322A  		db    130,"2*"
              	
C030: 0722    		db    7,$22
C032: 9480    		dw    define_32_2f
C034: 82322F  		db    130,"2/"
              	
C037: 0622    		db    6,$22
C039: 5381    		dw    define_40
C03B: 8140    		db    129,"@"
              	
C03D: 0822    		db    8,$22
C03F: 5D80    		dw    define_40_61_2b
C041: 8340612B		db    131,"@a+"
              	
C045: 0722    		db    7,$22
C047: 6780    		dw    define_40_61
C049: 824061  		db    130,"@a"
              	
C04C: 0722    		db    7,$22
C04E: EF80    		dw    define_41_21
C050: 826121  		db    130,"a!"
              	
C053: 0722    		db    7,$22
C055: D780    		dw    define_41_40
C057: 826140  		db    130,"a@"
              	
C05A: 0822    		db    8,$22
C05C: C380    		dw    define_61_6e_64
C05E: 03616E64		db    3,"and"
              	
C062: 0722    		db    7,$22
C064: 2781    		dw    define_62_21
C066: 826221  		db    130,"b!"
              	
C069: 0922    		db    9,$22
C06B: 0F81    		dw    define_62_21_61_2b
C06D: 84622161		db    132,"b!a+"
C071: 2B      	
              	
C072: 0822    		db    8,$22
C074: 1781    		dw    define_62_21_61
C076: 83622161		db    131,"b!a"
              	
C07A: 0722    		db    7,$22
C07C: 1E81    		dw    define_62_40
C07E: 826240  		db    130,"b@"
              	
C081: 0922    		db    9,$22
C083: FC80    		dw    define_62_40_61_2b
C085: 84624061		db    132,"b@a+"
C089: 2B      	
              	
C08A: 0822    		db    8,$22
C08C: 0681    		dw    define_62_40_61
C08E: 83624061		db    131,"b@a"
              	
C092: 0822    		db    8,$22
C094: 8580    		dw    define_63_6f_6d
C096: 03636F6D		db    3,"com"
              	
C09A: 0922    		db    9,$22
C09C: F680    		dw    define_64_72_6f_70
C09E: 8464726F		db    132,"drop"
C0A2: 70      	
              	
C0A3: 0822    		db    8,$22
C0A5: DF80    		dw    define_64_75_70
C0A7: 83647570		db    131,"dup"
              	
C0AB: 1422    		db    20,$22
C0AD: 3681    		dw    define_67_66_78_2e_72_61_77_2e_73_65_74_6d_6f_64_65
C0AF: 0F676678		db    15,"gfx.raw.setmode"
C0B3: 2E726177	
C0B7: 2E736574	
C0BB: 6D6F6465	
              	
C0BF: 1222    		db    18,$22
C0C1: 3F81    		dw    define_67_66_78_2e_72_61_77_2e_77_72_69_74_65
C0C3: 0D676678		db    13,"gfx.raw.write"
C0C7: 2E726177	
C0CB: 2E777269	
C0CF: 7465    	
              	
C0D1: 1522    		db    21,$22
C0D3: 4981    		dw    define_67_66_78_2e_72_61_77_2e_77_72_69_74_65_68_65_78
C0D5: 10676678		db    16,"gfx.raw.writehex"
C0D9: 2E726177	
C0DD: 2E777269	
C0E1: 74656865	
C0E5: 78      	
              	
C0E6: 0822    		db    8,$22
C0E8: 3081    		dw    define_6e_69_70
C0EA: 836E6970		db    131,"nip"
              	
C0EE: 0722    		db    7,$22
C0F0: 6881    		dw    define_6f_72
C0F2: 026F72  		db    2,"or"
              	
C0F5: 0922    		db    9,$22
C0F7: E580    		dw    define_6f_76_65_72
C0F9: 846F7665		db    132,"over"
C0FD: 72      	
              	
C0FE: 0922    		db    9,$22
C100: 7381    		dw    define_73_77_61_70
C102: 84737761		db    132,"swap"
C106: 70      	
              	
C107: 00      		db  0


; +++ segments +++

#CODE          = $8000 = 32768,  size = $4108 = 16648

; +++ global symbols +++

AlternateFont       = $817B = 33147          kernel.asm:574
Boot                = $8006 = 32774          kernel.asm:24
BootAddress         = $8033 = 32819          kernel.asm:67
BootPage            = $8035 = 32821          kernel.asm:69
DictionaryPage      = $0020 =    32          kernel.asm:12 (unused)
DisplayInfo         = $802F = 32815          kernel.asm:65 (unused)
DisplayInformation  = $803B = 32827          kernel.asm:80
FARCompileByte      = $847B = 33915          kernel.asm:594
FARCompileWord      = $8493 = 33939          kernel.asm:616 (unused)
FARMacroExpander    = $84AE = 33966          kernel.asm:641
FirstCodePage       = $0022 =    34          kernel.asm:13
FreeMemory          = $8809 = 34825          kernel.asm:1399
GFXInitialise48k    = $8635 = 34357          kernel.asm:978
GFXInitialiseLayer2 = $86AD = 34477          kernel.asm:1105
GFXInitialiseLowRes = $8764 = 34660          kernel.asm:1266
GFXPrintCharacter48k = $8661 = 34401          kernel.asm:1012
GFXPrintCharacterLayer2 = $86DD = 34525          kernel.asm:1141
GFXPrintCharacterLowRes = $878E = 34702          kernel.asm:1298
GFXWriteHexWordA    = $84F7 = 34039          kernel.asm:732 (unused)
Here                = $8027 = 32807          kernel.asm:59
HerePage            = $8029 = 32809          kernel.asm:61
IOScanKeyboard      = $8527 = 34087          kernel.asm:786 (unused)
L2PClear            = $86B6 = 34486          kernel.asm:1112
L2PClearBank        = $86C5 = 34501          kernel.asm:1120
LowClearScreen      = $8777 = 34679          kernel.asm:1278
NextFreePage        = $802B = 32811          kernel.asm:63 (unused)
PAGEInitialise      = $85F4 = 34292          kernel.asm:896
PAGERestore         = $861F = 34335          kernel.asm:944
PAGESwitch          = $8606 = 34310          kernel.asm:915
SIFontBase          = $8047 = 32839          kernel.asm:88
SIScreenDriver      = $8049 = 32841          kernel.asm:90
SIScreenHeight      = $803F = 32831          kernel.asm:84
SIScreenMode        = $8043 = 32835          kernel.asm:86
SIScreenWidth       = $803B = 32827          kernel.asm:82
SYS_GFX_SetMode     = $84B8 = 33976          kernel.asm:667
SYS_GFX_Write       = $84E2 = 34018          kernel.asm:707
SYS_GFX_WriteHex    = $84F5 = 34037          kernel.asm:730
SYS_Page_Restore    = $861F = 34335          kernel.asm:943 (unused)
SYS_Page_Switch     = $8606 = 34310          kernel.asm:914 (unused)
StackDefault        = $8037 = 32823          kernel.asm:71
StackTop            = $7EFC = 32508          kernel.asm:17
StopDefault         = $8024 = 32804          kernel.asm:37
SystemInformation   = $8027 = 32807          kernel.asm:57
__GFXConfigure      = $84D2 = 34002          kernel.asm:688
__GFXLayer2         = $84CA = 33994          kernel.asm:681
__GFXLowRes         = $84CF = 33999          kernel.asm:685
__GFXWCExit         = $84F0 = 34032          kernel.asm:717
__GFXWHByte         = $8509 = 34057          kernel.asm:748
__GFXWHDigit        = $851F = 34079          kernel.asm:762
__GFXWHNibble       = $8516 = 34070          kernel.asm:756
__L2Exit            = $875D = 34653          kernel.asm:1242
__L2Loop            = $874E = 34638          kernel.asm:1229
__L2Not1            = $86F9 = 34553          kernel.asm:1163
__L2Not2            = $86FF = 34559          kernel.asm:1167
__L2Not3            = $8705 = 34565          kernel.asm:1171
__L2NotCursor       = $8710 = 34576          kernel.asm:1180
__L2NotSet          = $8754 = 34644          kernel.asm:1234
__L2Outer           = $8745 = 34629          kernel.asm:1223
__LPExit            = $8802 = 34818          kernel.asm:1391
__LowLoop           = $87EE = 34798          kernel.asm:1375
__LowNotLower2      = $87E3 = 34787          kernel.asm:1367
__LowNotReverse     = $87B0 = 34736          kernel.asm:1327
__LowNotSet         = $87F4 = 34804          kernel.asm:1380
__LowOuter          = $87E5 = 34789          kernel.asm:1369
__MacroCopy         = $84AF = 33967          kernel.asm:643
__PAGEStackBase     = $804D = 32845          kernel.asm:101
__PAGEStackPointer  = $804B = 32843          kernel.asm:99
__ZXWCCopy          = $86A1 = 34465          kernel.asm:1074
__ZXWCExit          = $86A8 = 34472          kernel.asm:1081
___kr4              = $8558 = 34136          kernel.asm:817
__cs1               = $8645 = 34373          kernel.asm:988
__cs2               = $864D = 34381          kernel.asm:993
__kr1               = $853C = 34108          kernel.asm:800
__kr2               = $8547 = 34119          kernel.asm:806
__kr3               = $8549 = 34121          kernel.asm:809
__kr_exit           = $8578 = 34168          kernel.asm:847
__kr_keypressed     = $8572 = 34162          kernel.asm:841
__kr_no_shift_table = $857C = 34172          kernel.asm:862
__kr_shift_table    = $85A4 = 34212          kernel.asm:868
__kr_symbol_shift_table = $85CC = 34252          kernel.asm:874
__multiply_loop     = $80A4 = 32932          kernel.asm:236
__multiply_noadd    = $80A9 = 32937          kernel.asm:240
_end                = $C108 = 49416          kernel.asm:18 (unused)
_size               = $4108 = 16648          kernel.asm:18 (unused)
define_21           = $815D = 33117          kernel.asm:534
define_21_61        = $807B = 32891          kernel.asm:178
define_21_61_2b     = $8071 = 32881          kernel.asm:163
define_2a           = $809D = 32925          kernel.asm:231
define_2b           = $80CE = 32974          kernel.asm:287
define_2d_6f_72     = $80B8 = 32952          kernel.asm:257
define_32_2a        = $808C = 32908          kernel.asm:206
define_32_2f        = $8094 = 32916          kernel.asm:219
define_40           = $8153 = 33107          kernel.asm:519
define_40_61        = $8067 = 32871          kernel.asm:148
define_40_61_2b     = $805D = 32861          kernel.asm:133
define_41_21        = $80EF = 33007          kernel.asm:340
define_41_40        = $80D7 = 32983          kernel.asm:301
define_61_6e_64     = $80C3 = 32963          kernel.asm:272
define_62_21        = $8127 = 33063          kernel.asm:439
define_62_21_61     = $8117 = 33047          kernel.asm:414
define_62_21_61_2b  = $810F = 33039          kernel.asm:401
define_62_40        = $811E = 33054          kernel.asm:426
define_62_40_61     = $8106 = 33030          kernel.asm:388
define_62_40_61_2b  = $80FC = 33020          kernel.asm:374
define_63_6f_6d     = $8085 = 32901          kernel.asm:193
define_64_72_6f_70  = $80F6 = 33014          kernel.asm:352
define_64_75_70     = $80DF = 32991          kernel.asm:314
define_67_66_78_2e_72_61_77_2e_73_65_74_6d_6f_64_65 = $8136 = 33078          kernel.asm:474
define_67_66_78_2e_72_61_77_2e_77_72_69_74_65 = $813F = 33087          kernel.asm:485
define_67_66_78_2e_72_61_77_2e_77_72_69_74_65_68_65_78 = $8149 = 33097          kernel.asm:497
define_6e_69_70     = $8130 = 33072          kernel.asm:453
define_6f_72        = $8168 = 33128          kernel.asm:550
define_6f_76_65_72  = $80E5 = 32997          kernel.asm:325
define_73_77_61_70  = $8173 = 33139          kernel.asm:565
end_21              = $8168 = 33128          kernel.asm:544
end_21_61           = $8085 = 32901          kernel.asm:187
end_21_61_2b        = $807B = 32891          kernel.asm:172
end_2b              = $80D7 = 32983          kernel.asm:295
end_32_2a           = $8094 = 32916          kernel.asm:213
end_32_2f           = $809D = 32925          kernel.asm:225
end_40              = $815D = 33117          kernel.asm:528
end_40_61           = $8071 = 32881          kernel.asm:157
end_40_61_2b        = $8067 = 32871          kernel.asm:142
end_41_21           = $80F6 = 33014          kernel.asm:346
end_41_40           = $80DF = 32991          kernel.asm:308
end_62_21           = $8130 = 33072          kernel.asm:447
end_62_21_61        = $811E = 33054          kernel.asm:420
end_62_21_61_2b     = $8117 = 33047          kernel.asm:408
end_62_40           = $8127 = 33063          kernel.asm:433
end_62_40_61        = $810F = 33039          kernel.asm:395
end_62_40_61_2b     = $8106 = 33030          kernel.asm:382
end_64_72_6f_70     = $80FC = 33020          kernel.asm:357
end_64_75_70        = $80E5 = 32997          kernel.asm:319
end_6e_69_70        = $8136 = 33078          kernel.asm:458
end_6f_76_65_72     = $80EF = 33007          kernel.asm:334
end_73_77_61_70     = $817B = 33147          kernel.asm:572
start_21            = $8162 = 33122          kernel.asm:537
start_21_61         = $8080 = 32896          kernel.asm:181
start_21_61_2b      = $8076 = 32886          kernel.asm:166
start_2b            = $80D3 = 32979          kernel.asm:290
start_32_2a         = $8091 = 32913          kernel.asm:209
start_32_2f         = $8099 = 32921          kernel.asm:222
start_40            = $8158 = 33112          kernel.asm:522
start_40_61         = $806C = 32876          kernel.asm:151
start_40_61_2b      = $8062 = 32866          kernel.asm:136
start_41_21         = $80F4 = 33012          kernel.asm:343
start_41_40         = $80DC = 32988          kernel.asm:304
start_62_21         = $812C = 33068          kernel.asm:442
start_62_21_61      = $811C = 33052          kernel.asm:417
start_62_21_61_2b   = $8114 = 33044          kernel.asm:404
start_62_40         = $8123 = 33059          kernel.asm:429
start_62_40_61      = $810B = 33035          kernel.asm:391
start_62_40_61_2b   = $8101 = 33025          kernel.asm:377
start_64_72_6f_70   = $80FB = 33019          kernel.asm:355
start_64_75_70      = $80E4 = 32996          kernel.asm:317
start_6e_69_70      = $8135 = 33077          kernel.asm:456
start_6f_76_65_72   = $80EA = 33002          kernel.asm:328
start_73_77_61_70   = $8178 = 33144          kernel.asm:568


total time: 0.0054 sec.
no errors
